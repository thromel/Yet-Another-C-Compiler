Terminals unused in grammar

    IF
    FOR
    DO
    SWITCH
    DEFAULT
    ELSE
    WHILE
    BREAK
    CHAR
    DOUBLE
    RETURN
    CASE
    CONTINUE
    INCOP
    DECOP
    ASSIGNOP
    NOT
    PRINTLN
    STRING
    CONST_CHAR
    MULOP
    LOGICOP
    BITOP


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program unit
    3        | unit

    4 unit: var_declaration
    5     | func_definition

    6 $@1: %empty

    7 func_definition: type_specifier ID LPAREN RPAREN $@1 compound_statement

    8 $@2: %empty

    9 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@2 compound_statement

   10 parameter_list: parameter_list COMMA type_specifier ID
   11               | parameter_list COMMA type_specifier
   12               | type_specifier ID
   13               | type_specifier
   14               | parameter_list COMMA error ID
   15               | error ID

   16 var_declaration: type_specifier declaration_list SEMICOLON
   17                | type_specifier declaration_list error

   18 type_specifier: INT
   19               | FLOAT
   20               | VOID

   21 declaration_list: declaration_list COMMA ID
   22                 | declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
   23                 | ID
   24                 | ID LTHIRD CONST_INT RTHIRD

   25 statements: statement
   26           | statements statement

   27 statement: var_declaration
   28          | expression_statement
   29          | compound_statement

   30 expression_statement: SEMICOLON
   31                     | expression SEMICOLON

   32 expression: logic_expression

   33 logic_expression: simple_expression
   34                 | simple_expression RELOP simple_expression

   35 simple_expression: term
   36                  | simple_expression ADDOP term

   37 term: unary_expression

   38 unary_expression: factor

   39 factor: variable

   40 variable: ID
   41         | CONST_INT
   42         | CONST_FLOAT

   43 $@3: %empty

   44 compound_statement: LCURL $@3 statements RCURL

   45 $@4: %empty

   46 compound_statement: LCURL $@4 RCURL


Terminals, with rules where they appear

    $end (0) 0
    error (256) 14 15 17
    IF (258)
    FOR (259)
    DO (260)
    INT (261) 18
    FLOAT (262) 19
    VOID (263) 20
    SWITCH (264)
    DEFAULT (265)
    ELSE (266)
    WHILE (267)
    BREAK (268)
    CHAR (269)
    DOUBLE (270)
    RETURN (271)
    CASE (272)
    CONTINUE (273)
    INCOP (274)
    DECOP (275)
    ASSIGNOP (276)
    NOT (277)
    LPAREN (278) 7 9
    RPAREN (279) 7 9
    LCURL (280) 44 46
    RCURL (281) 44 46
    LTHIRD (282) 22 24
    RTHIRD (283) 22 24
    COMMA (284) 10 11 14 21 22
    SEMICOLON (285) 16 30 31
    PRINTLN (286)
    STRING (287)
    ID <symbol> (288) 7 9 10 12 14 15 21 22 23 24 40
    CONST_INT <symbol> (289) 22 24 41
    CONST_FLOAT <symbol> (290) 42
    CONST_CHAR <symbol> (291)
    ADDOP <symbol> (292) 36
    MULOP <symbol> (293)
    LOGICOP <symbol> (294)
    RELOP <symbol> (295) 34
    BITOP <symbol> (296)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    start <symbol> (43)
        on left: 1
        on right: 0
    program <symbol> (44)
        on left: 2 3
        on right: 1 2
    unit <symbol> (45)
        on left: 4 5
        on right: 2 3
    func_definition <symbol> (46)
        on left: 7 9
        on right: 5
    $@1 (47)
        on left: 6
        on right: 7
    $@2 (48)
        on left: 8
        on right: 9
    parameter_list <symbol> (49)
        on left: 10 11 12 13 14 15
        on right: 9 10 11 14
    var_declaration <symbol> (50)
        on left: 16 17
        on right: 4 27
    type_specifier <symbol> (51)
        on left: 18 19 20
        on right: 7 9 10 11 12 13 16 17
    declaration_list <symbol> (52)
        on left: 21 22 23 24
        on right: 16 17 21 22
    statements <symbol> (53)
        on left: 25 26
        on right: 26 44
    statement <symbol> (54)
        on left: 27 28 29
        on right: 25 26
    expression_statement <symbol> (55)
        on left: 30 31
        on right: 28
    expression <symbol> (56)
        on left: 32
        on right: 31
    logic_expression <symbol> (57)
        on left: 33 34
        on right: 32
    simple_expression <symbol> (58)
        on left: 35 36
        on right: 33 34 36
    term <symbol> (59)
        on left: 37
        on right: 35 36
    unary_expression <symbol> (60)
        on left: 38
        on right: 37
    factor <symbol> (61)
        on left: 39
        on right: 38
    variable <symbol> (62)
        on left: 40 41 42
        on right: 39
    compound_statement <symbol> (63)
        on left: 44 46
        on right: 7 9 29
    $@3 (64)
        on left: 43
        on right: 44
    $@4 (65)
        on left: 45
        on right: 46


State 0

    0 $accept: . start $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    start            go to state 4
    program          go to state 5
    unit             go to state 6
    func_definition  go to state 7
    var_declaration  go to state 8
    type_specifier   go to state 9


State 1

   18 type_specifier: INT .

    $default  reduce using rule 18 (type_specifier)


State 2

   19 type_specifier: FLOAT .

    $default  reduce using rule 19 (type_specifier)


State 3

   20 type_specifier: VOID .

    $default  reduce using rule 20 (type_specifier)


State 4

    0 $accept: start . $end

    $end  shift, and go to state 10


State 5

    1 start: program .
    2 program: program . unit

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 1 (start)

    unit             go to state 11
    func_definition  go to state 7
    var_declaration  go to state 8
    type_specifier   go to state 9


State 6

    3 program: unit .

    $default  reduce using rule 3 (program)


State 7

    5 unit: func_definition .

    $default  reduce using rule 5 (unit)


State 8

    4 unit: var_declaration .

    $default  reduce using rule 4 (unit)


State 9

    7 func_definition: type_specifier . ID LPAREN RPAREN $@1 compound_statement
    9                | type_specifier . ID LPAREN parameter_list RPAREN $@2 compound_statement
   16 var_declaration: type_specifier . declaration_list SEMICOLON
   17                | type_specifier . declaration_list error

    ID  shift, and go to state 12

    declaration_list  go to state 13


State 10

    0 $accept: start $end .

    $default  accept


State 11

    2 program: program unit .

    $default  reduce using rule 2 (program)


State 12

    7 func_definition: type_specifier ID . LPAREN RPAREN $@1 compound_statement
    9                | type_specifier ID . LPAREN parameter_list RPAREN $@2 compound_statement
   23 declaration_list: ID .
   24                 | ID . LTHIRD CONST_INT RTHIRD

    LPAREN  shift, and go to state 14
    LTHIRD  shift, and go to state 15

    $default  reduce using rule 23 (declaration_list)


State 13

   16 var_declaration: type_specifier declaration_list . SEMICOLON
   17                | type_specifier declaration_list . error
   21 declaration_list: declaration_list . COMMA ID
   22                 | declaration_list . COMMA ID LTHIRD CONST_INT RTHIRD

    error      shift, and go to state 16
    COMMA      shift, and go to state 17
    SEMICOLON  shift, and go to state 18


State 14

    7 func_definition: type_specifier ID LPAREN . RPAREN $@1 compound_statement
    9                | type_specifier ID LPAREN . parameter_list RPAREN $@2 compound_statement

    error   shift, and go to state 19
    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    VOID    shift, and go to state 3
    RPAREN  shift, and go to state 20

    parameter_list  go to state 21
    type_specifier  go to state 22


State 15

   24 declaration_list: ID LTHIRD . CONST_INT RTHIRD

    CONST_INT  shift, and go to state 23


State 16

   17 var_declaration: type_specifier declaration_list error .

    $default  reduce using rule 17 (var_declaration)


State 17

   21 declaration_list: declaration_list COMMA . ID
   22                 | declaration_list COMMA . ID LTHIRD CONST_INT RTHIRD

    ID  shift, and go to state 24


State 18

   16 var_declaration: type_specifier declaration_list SEMICOLON .

    $default  reduce using rule 16 (var_declaration)


State 19

   15 parameter_list: error . ID

    ID  shift, and go to state 25


State 20

    7 func_definition: type_specifier ID LPAREN RPAREN . $@1 compound_statement

    $default  reduce using rule 6 ($@1)

    $@1  go to state 26


State 21

    9 func_definition: type_specifier ID LPAREN parameter_list . RPAREN $@2 compound_statement
   10 parameter_list: parameter_list . COMMA type_specifier ID
   11               | parameter_list . COMMA type_specifier
   14               | parameter_list . COMMA error ID

    RPAREN  shift, and go to state 27
    COMMA   shift, and go to state 28


State 22

   12 parameter_list: type_specifier . ID
   13               | type_specifier .

    ID  shift, and go to state 29

    $default  reduce using rule 13 (parameter_list)


State 23

   24 declaration_list: ID LTHIRD CONST_INT . RTHIRD

    RTHIRD  shift, and go to state 30


State 24

   21 declaration_list: declaration_list COMMA ID .
   22                 | declaration_list COMMA ID . LTHIRD CONST_INT RTHIRD

    LTHIRD  shift, and go to state 31

    $default  reduce using rule 21 (declaration_list)


State 25

   15 parameter_list: error ID .

    $default  reduce using rule 15 (parameter_list)


State 26

    7 func_definition: type_specifier ID LPAREN RPAREN $@1 . compound_statement

    LCURL  shift, and go to state 32

    compound_statement  go to state 33


State 27

    9 func_definition: type_specifier ID LPAREN parameter_list RPAREN . $@2 compound_statement

    $default  reduce using rule 8 ($@2)

    $@2  go to state 34


State 28

   10 parameter_list: parameter_list COMMA . type_specifier ID
   11               | parameter_list COMMA . type_specifier
   14               | parameter_list COMMA . error ID

    error  shift, and go to state 35
    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    type_specifier  go to state 36


State 29

   12 parameter_list: type_specifier ID .

    $default  reduce using rule 12 (parameter_list)


State 30

   24 declaration_list: ID LTHIRD CONST_INT RTHIRD .

    $default  reduce using rule 24 (declaration_list)


State 31

   22 declaration_list: declaration_list COMMA ID LTHIRD . CONST_INT RTHIRD

    CONST_INT  shift, and go to state 37


State 32

   44 compound_statement: LCURL . $@3 statements RCURL
   46                   | LCURL . $@4 RCURL

    RCURL     reduce using rule 45 ($@4)
    $default  reduce using rule 43 ($@3)

    $@3  go to state 38
    $@4  go to state 39


State 33

    7 func_definition: type_specifier ID LPAREN RPAREN $@1 compound_statement .

    $default  reduce using rule 7 (func_definition)


State 34

    9 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@2 . compound_statement

    LCURL  shift, and go to state 32

    compound_statement  go to state 40


State 35

   14 parameter_list: parameter_list COMMA error . ID

    ID  shift, and go to state 41


State 36

   10 parameter_list: parameter_list COMMA type_specifier . ID
   11               | parameter_list COMMA type_specifier .

    ID  shift, and go to state 42

    $default  reduce using rule 11 (parameter_list)


State 37

   22 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT . RTHIRD

    RTHIRD  shift, and go to state 43


State 38

   44 compound_statement: LCURL $@3 . statements RCURL

    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    LCURL        shift, and go to state 32
    SEMICOLON    shift, and go to state 44
    ID           shift, and go to state 45
    CONST_INT    shift, and go to state 46
    CONST_FLOAT  shift, and go to state 47

    var_declaration       go to state 48
    type_specifier        go to state 49
    statements            go to state 50
    statement             go to state 51
    expression_statement  go to state 52
    expression            go to state 53
    logic_expression      go to state 54
    simple_expression     go to state 55
    term                  go to state 56
    unary_expression      go to state 57
    factor                go to state 58
    variable              go to state 59
    compound_statement    go to state 60


State 39

   46 compound_statement: LCURL $@4 . RCURL

    RCURL  shift, and go to state 61


State 40

    9 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@2 compound_statement .

    $default  reduce using rule 9 (func_definition)


State 41

   14 parameter_list: parameter_list COMMA error ID .

    $default  reduce using rule 14 (parameter_list)


State 42

   10 parameter_list: parameter_list COMMA type_specifier ID .

    $default  reduce using rule 10 (parameter_list)


State 43

   22 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT RTHIRD .

    $default  reduce using rule 22 (declaration_list)


State 44

   30 expression_statement: SEMICOLON .

    $default  reduce using rule 30 (expression_statement)


State 45

   40 variable: ID .

    $default  reduce using rule 40 (variable)


State 46

   41 variable: CONST_INT .

    $default  reduce using rule 41 (variable)


State 47

   42 variable: CONST_FLOAT .

    $default  reduce using rule 42 (variable)


State 48

   27 statement: var_declaration .

    $default  reduce using rule 27 (statement)


State 49

   16 var_declaration: type_specifier . declaration_list SEMICOLON
   17                | type_specifier . declaration_list error

    ID  shift, and go to state 62

    declaration_list  go to state 13


State 50

   26 statements: statements . statement
   44 compound_statement: LCURL $@3 statements . RCURL

    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    LCURL        shift, and go to state 32
    RCURL        shift, and go to state 63
    SEMICOLON    shift, and go to state 44
    ID           shift, and go to state 45
    CONST_INT    shift, and go to state 46
    CONST_FLOAT  shift, and go to state 47

    var_declaration       go to state 48
    type_specifier        go to state 49
    statement             go to state 64
    expression_statement  go to state 52
    expression            go to state 53
    logic_expression      go to state 54
    simple_expression     go to state 55
    term                  go to state 56
    unary_expression      go to state 57
    factor                go to state 58
    variable              go to state 59
    compound_statement    go to state 60


State 51

   25 statements: statement .

    $default  reduce using rule 25 (statements)


State 52

   28 statement: expression_statement .

    $default  reduce using rule 28 (statement)


State 53

   31 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 54

   32 expression: logic_expression .

    $default  reduce using rule 32 (expression)


State 55

   33 logic_expression: simple_expression .
   34                 | simple_expression . RELOP simple_expression
   36 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 66
    RELOP  shift, and go to state 67

    $default  reduce using rule 33 (logic_expression)


State 56

   35 simple_expression: term .

    $default  reduce using rule 35 (simple_expression)


State 57

   37 term: unary_expression .

    $default  reduce using rule 37 (term)


State 58

   38 unary_expression: factor .

    $default  reduce using rule 38 (unary_expression)


State 59

   39 factor: variable .

    $default  reduce using rule 39 (factor)


State 60

   29 statement: compound_statement .

    $default  reduce using rule 29 (statement)


State 61

   46 compound_statement: LCURL $@4 RCURL .

    $default  reduce using rule 46 (compound_statement)


State 62

   23 declaration_list: ID .
   24                 | ID . LTHIRD CONST_INT RTHIRD

    LTHIRD  shift, and go to state 15

    $default  reduce using rule 23 (declaration_list)


State 63

   44 compound_statement: LCURL $@3 statements RCURL .

    $default  reduce using rule 44 (compound_statement)


State 64

   26 statements: statements statement .

    $default  reduce using rule 26 (statements)


State 65

   31 expression_statement: expression SEMICOLON .

    $default  reduce using rule 31 (expression_statement)


State 66

   36 simple_expression: simple_expression ADDOP . term

    ID           shift, and go to state 45
    CONST_INT    shift, and go to state 46
    CONST_FLOAT  shift, and go to state 47

    term              go to state 68
    unary_expression  go to state 57
    factor            go to state 58
    variable          go to state 59


State 67

   34 logic_expression: simple_expression RELOP . simple_expression

    ID           shift, and go to state 45
    CONST_INT    shift, and go to state 46
    CONST_FLOAT  shift, and go to state 47

    simple_expression  go to state 69
    term               go to state 56
    unary_expression   go to state 57
    factor             go to state 58
    variable           go to state 59


State 68

   36 simple_expression: simple_expression ADDOP term .

    $default  reduce using rule 36 (simple_expression)


State 69

   34 logic_expression: simple_expression RELOP simple_expression .
   36 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 34 (logic_expression)
