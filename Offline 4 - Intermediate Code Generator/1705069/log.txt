Line no: 1 type_specifier	: INT

int


New ScopeTable #1_1 created
Line no: 2 type_specifier	: INT

int

Line no: 2 declaration_list : ID

x

Line no: 2 declaration_list : declaration_list COMMA ID

x, y

Line no: 2 declaration_list : declaration_list COMMA ID

x, y, min

Line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

int x, y, min;

Line no: 2 statement : var_declaration

int x, y, min;

Line no: 2 statements : statement

int x, y, min;

Line no: 3 variable : ID

min

Line no: 3 factor : CONST_INT

1

Line no: 3 unary_expression : factor

1

Line no: 3 unary_expression : ADDOP unary_expression

-1

Line no: 3 term : unary_expression

-1

Line no: 3 simple_expression : term

-1

Line no: 3 rel_expression : simple_expression

-1

Line no: 3 logic_expression : rel_expression

-1

Line no: 3 expression : variable ASSIGNOP logic_expression

min=-1

Line no: 3 expression_statement : expression SEMICOLON

min=-1;

Line no: 3 statement : expression_statement

min=-1;

Line no: 3 statements : statements statement

int x, y, min;
min=-1;

Line no: 4 variable : ID

x

Line no: 4 factor : CONST_INT

20

Line no: 4 unary_expression : factor

20

Line no: 4 term : unary_expression

20

Line no: 4 simple_expression : term

20

Line no: 4 rel_expression : simple_expression

20

Line no: 4 logic_expression : rel_expression

20

Line no: 4 expression : variable ASSIGNOP logic_expression

x=20

Line no: 4 expression_statement : expression SEMICOLON

x=20;

Line no: 4 statement : expression_statement

x=20;

Line no: 4 statements : statements statement

int x, y, min;
min=-1;
x=20;

Line no: 5 variable : ID

y

Line no: 5 factor : CONST_INT

30

Line no: 5 unary_expression : factor

30

Line no: 5 term : unary_expression

30

Line no: 5 simple_expression : term

30

Line no: 5 rel_expression : simple_expression

30

Line no: 5 logic_expression : rel_expression

30

Line no: 5 expression : variable ASSIGNOP logic_expression

y=30

Line no: 5 expression_statement : expression SEMICOLON

y=30;

Line no: 5 statement : expression_statement

y=30;

Line no: 5 statements : statements statement

int x, y, min;
min=-1;
x=20;
y=30;

Line no: 6 variable : ID

y

Line no: 6 factor : variable

y

Line no: 6 unary_expression : factor

y

Line no: 6 term : unary_expression

y

Line no: 6 simple_expression : term

y

Line no: 6 variable : ID

x

Line no: 6 factor : variable

x

Line no: 6 unary_expression : factor

x

Line no: 6 term : unary_expression

x

Line no: 6 simple_expression : term

x

Line no: 6 rel_expression : simple_expression RELOP simple_expression

y<x

Line no: 6 logic_expression : rel_expression

y<x

Line no: 6 expression : logic_expression

y<x


New ScopeTable #1_1_1 created
Line no: 7 variable : ID

min

Line no: 7 variable : ID

x

Line no: 7 factor : variable

x

Line no: 7 unary_expression : factor

x

Line no: 7 term : unary_expression

x

Line no: 7 simple_expression : term

x

Line no: 7 rel_expression : simple_expression

x

Line no: 7 logic_expression : rel_expression

x

Line no: 7 expression : variable ASSIGNOP logic_expression

min=x

Line no: 7 expression_statement : expression SEMICOLON

min=x;

Line no: 7 statement : expression_statement

min=x;

Line no: 7 statements : statement

min=x;

Line no: 8 compound_statement : LCURL statements RCURL

{
min=x;
}



ScopeTable #1_1_1

ScopeTable #1_1
1 --> <x: ID> 
2 --> <y: ID>  <min: ID> 

ScopeTable #1
1 --> <main: ID> 
Line no: 8 statement : compound_statement

{
min=x;
}


Line no: 9 IF LPAREN expression RPAREN statement

if(y<x){
min=x;
}


Line no: 9 statements : statements statement

int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}


Line no: 9 PRINTLN LPAREN ID RPAREN SEMICOLON

printf(min);

20
Line no: 9 statements : statements statement

int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}

printf(min);

Line no: 10 compound_statement : LCURL statements RCURL

{
int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}

printf(min);
}



ScopeTable #1_1
1 --> <x: ID> 
2 --> <y: ID>  <min: ID> 

ScopeTable #1
1 --> <main: ID> 
Line no: 10 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}

printf(min);
}


Line no: 10 unit : func_definition

int main ( ) {
int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}

printf(min);
}


Line no: 10 program : unit

int main ( ) {
int x, y, min;
min=-1;
x=20;
y=30;
if(y<x){
min=x;
}

printf(min);
}



ScopeTable #1
1 --> <main: ID> 

Total lines: 10
Total errors: 0
