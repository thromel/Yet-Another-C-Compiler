Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int x

 

------------------

New ScopeTable #1_1 created
Line no: 2 variable : ID

------------------
x

 

------------------
Line no: 2 factor : variable

------------------
x

 

------------------
Line no: 2 unary_expression : factor

------------------
x

 

------------------
Line no: 2 term : unary_expression

------------------
x

 

------------------
Line no: 2 simple_expression : term

------------------
x

 

------------------
Line no: 2 factor : CONST_INT

------------------
0

 

------------------
Line no: 2 unary_expression : factor

------------------
0

 

------------------
Line no: 2 term : unary_expression

------------------
0

 

------------------
Line no: 2 simple_expression : term

------------------
0

 

------------------
Line no: 2 rel_expression : simple_expression RELOP simple_expression

------------------
x>0

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 logic_expression : rel_expression

------------------
x>0

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 expression : logic_expression

------------------
x>0

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 3 variable : ID

------------------
x

 

------------------
Line no: 3 factor : variable

------------------
x

 

------------------
Line no: 3 unary_expression : factor

------------------
x

 

------------------
Line no: 3 term : unary_expression

------------------
x

 

------------------
Line no: 3 simple_expression : term

------------------
x

 

------------------
Line no: 3 factor : CONST_INT

------------------
1

 

------------------
Line no: 3 unary_expression : factor

------------------
1

 

------------------
Line no: 3 term : unary_expression

------------------
1

 

------------------
Line no: 3 simple expression : simple_expression ADDOP term

------------------
x-1

 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 3 rel_expression : simple_expression

------------------
x-1

 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 3 logic_expression : rel_expression

------------------
x-1

 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 3 arguments : logic_expression

------------------
x-1

 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 3 argument_list : arguments

------------------
x-1

 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 3 factor : ID LPAREN argument_list RPAREN

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 unary_expression : factor

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 term : unary_expression

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 simple_expression : term

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 rel_expression : simple_expression

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 logic_expression : rel_expression

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 expression : logic_expression

------------------
rec(x-1)

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 expression_statement : expression SEMICOLON

------------------
rec(x-1);

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 3 statement : expression_statement

------------------
rec(x-1);

 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 4 IF LPAREN expression RPAREN statement

------------------
if(x>0)rec(x-1);

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


------------------
Line no: 4 statements : statement

------------------
if(x>0)rec(x-1);

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


------------------
Line no: 4 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(x);

 

------------------
-1
Line no: 4 statements : statements statement

------------------
if(x>0)rec(x-1);
printf(x);

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC


------------------
Line no: 5 compound_statement : LCURL statements RCURL

------------------
{
if(x>0)rec(x-1);
printf(x);
}


 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC


------------------

ScopeTable #1_1
1 --> <x: ID> 

ScopeTable #1
6 --> <rec: ID> 
Line no: 5 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int rec ( int x ) {
if(x>0)rec(x-1);
printf(x);
}


rec PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
rec ENDP



------------------
Line no: 5 unit : func_definition

------------------
int rec ( int x ) {
if(x>0)rec(x-1);
printf(x);
}


rec PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
rec ENDP



------------------
Line no: 5 program : unit

------------------
int rec ( int x ) {
if(x>0)rec(x-1);
printf(x);
}


rec PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
rec ENDP



------------------

ScopeTable #1
6 --> <rec: ID> 
Line no: 7 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 7 factor : CONST_INT

------------------
5

 

------------------
Line no: 7 unary_expression : factor

------------------
5

 

------------------
Line no: 7 term : unary_expression

------------------
5

 

------------------
Line no: 7 simple_expression : term

------------------
5

 

------------------
Line no: 7 rel_expression : simple_expression

------------------
5

 

------------------
Line no: 7 logic_expression : rel_expression

------------------
5

 

------------------
Line no: 7 arguments : logic_expression

------------------
5

 

------------------
Line no: 7 argument_list : arguments

------------------
5

 

------------------
Line no: 7 factor : ID LPAREN argument_list RPAREN

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 unary_expression : factor

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 term : unary_expression

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 simple_expression : term

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 rel_expression : simple_expression

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 logic_expression : rel_expression

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 expression : logic_expression

------------------
rec(5)

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 expression_statement : expression SEMICOLON

------------------
rec(5);

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 statement : expression_statement

------------------
rec(5);

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 statements : statement

------------------
rec(5);

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------
Line no: 7 compound_statement : LCURL statements RCURL

------------------
{
rec(5);
}


 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1

------------------

ScopeTable #1_2

ScopeTable #1
1 --> <main: ID> 
6 --> <rec: ID> 
Line no: 7 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
rec(5);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 7 unit : func_definition

------------------
int main ( ) {
rec(5);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 7 program : program unit

------------------
int rec ( int x ) {
if(x>0)rec(x-1);
printf(x);
}

int main ( ) {
rec(5);
}


rec PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 0
JG L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
PUSH x1_1
 
 
MOV AX, x1_1
SUB AX, 1
MOV temp1, AX

PUSH return_loc
PUSH temp1
CALL rec
POP return_loc
POP x1_1
L3:


MOV AX, x1_1
CALL OUTDEC

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
rec ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH x1_1
 
PUSH return_loc
PUSH 5
CALL rec
POP return_loc
POP x1_1
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 7
Total errors: 0
-------------------------------------
Optimizer log: 
Removed blank line : 19
Removed blank line : 20
Removed blank line : 33
Removed blank line : 35
Removed blank line : 36
Removed blank line : 66
Removed blank line : 68
Line removed:7
-------------------------------------

ScopeTable #1
1 --> <main: ID> 
6 --> <rec: ID> 
