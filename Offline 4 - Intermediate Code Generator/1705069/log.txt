Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int a

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : parameter_list COMMA type_specifier ID

------------------
int a,int b

 

------------------

New ScopeTable #1_1 created
Line no: 2 variable : ID

------------------
a

 

------------------
Line no: 2 factor : variable

------------------
a

 

------------------
Line no: 2 unary_expression : factor

------------------
a

 

------------------
Line no: 2 term : unary_expression

------------------
a

 

------------------
Line no: 2 simple_expression : term

------------------
a

 

------------------
Line no: 2 variable : ID

------------------
b

 

------------------
Line no: 2 factor : variable

------------------
b

 

------------------
Line no: 2 unary_expression : factor

------------------
b

 

------------------
Line no: 2 term : unary_expression

------------------
b

 

------------------
Line no: 2 simple_expression : term

------------------
b

 

------------------
Line no: 2 rel_expression : simple_expression RELOP simple_expression

------------------
a>=b

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 logic_expression : rel_expression

------------------
a>=b

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 expression : logic_expression

------------------
a>=b

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------

New ScopeTable #1_1_1 created
Line no: 3 variable : ID

------------------
a

 

------------------
Line no: 3 factor : variable

------------------
a

 

------------------
Line no: 3 unary_expression : factor

------------------
a

 

------------------
Line no: 3 term : unary_expression

------------------
a

 

------------------
Line no: 3 simple_expression : term

------------------
a

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
a

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
a

 

------------------
Line no: 3 expression : logic_expression

------------------
a

 

------------------
Line no: 3 RETURN expression SEMICOLON

------------------
return a;

 
MOV AX, a1_1

JMP L3

------------------
Line no: 3 statements : statement

------------------
return a;

 
MOV AX, a1_1

JMP L3

------------------
Line no: 4 compound_statement : LCURL statements RCURL

------------------
{
return a;
}


 
MOV AX, a1_1

JMP L3

------------------

ScopeTable #1_1_1

ScopeTable #1_1
0 --> <b: ID> 
6 --> <a: ID> 

ScopeTable #1
4 --> <maxnum: ID> 
Line no: 4 statement : compound_statement

------------------
{
return a;
}


 
MOV AX, a1_1

JMP L3

------------------

New ScopeTable #1_1_2 created
Line no: 5 variable : ID

------------------
b

 

------------------
Line no: 5 factor : variable

------------------
b

 

------------------
Line no: 5 unary_expression : factor

------------------
b

 

------------------
Line no: 5 term : unary_expression

------------------
b

 

------------------
Line no: 5 simple_expression : term

------------------
b

 

------------------
Line no: 5 rel_expression : simple_expression

------------------
b

 

------------------
Line no: 5 logic_expression : rel_expression

------------------
b

 

------------------
Line no: 5 expression : logic_expression

------------------
b

 

------------------
Line no: 5 RETURN expression SEMICOLON

------------------
return b;

 
MOV AX, b1_1

JMP L4

------------------
Line no: 5 statements : statement

------------------
return b;

 
MOV AX, b1_1

JMP L4

------------------
Line no: 6 compound_statement : LCURL statements RCURL

------------------
{
return b;
}


 
MOV AX, b1_1

JMP L4

------------------

ScopeTable #1_1_2

ScopeTable #1_1
0 --> <b: ID> 
6 --> <a: ID> 

ScopeTable #1
4 --> <maxnum: ID> 
Line no: 6 statement : compound_statement

------------------
{
return b;
}


 
MOV AX, b1_1

JMP L4

------------------
Line no: 6 IF LPAREN expression RPAREN statement ELSE statement

------------------
if(a>=b){
return a;
}
else {
return b;
}


 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:


------------------
Line no: 6 statements : statement

------------------
if(a>=b){
return a;
}
else {
return b;
}


 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:


------------------
Line no: 7 compound_statement : LCURL statements RCURL

------------------
{
if(a>=b){
return a;
}
else {
return b;
}

}


 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:


------------------

ScopeTable #1_1
0 --> <b: ID> 
6 --> <a: ID> 

ScopeTable #1
4 --> <maxnum: ID> 
Line no: 7 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int maxnum ( int a,int b ) {
if(a>=b){
return a;
}
else {
return b;
}

}


maxnum PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
maxnum ENDP



------------------
Line no: 7 unit : func_definition

------------------
int maxnum ( int a,int b ) {
if(a>=b){
return a;
}
else {
return b;
}

}


maxnum PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
maxnum ENDP



------------------
Line no: 7 program : unit

------------------
int maxnum ( int a,int b ) {
if(a>=b){
return a;
}
else {
return b;
}

}


maxnum PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
maxnum ENDP



------------------

ScopeTable #1
4 --> <maxnum: ID> 
Line no: 9 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 10 type_specifier	: INT

------------------
int

 

------------------
Line no: 10 declaration_list : ID

------------------
x

 

------------------
Line no: 10 declaration_list : declaration_list COMMA ID

------------------
x, y

 

------------------
Line no: 10 declaration_list : declaration_list COMMA ID

------------------
x, y, max

 

------------------
Line no: 10 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int x, y, max;

 

------------------
Line no: 10 statement : var_declaration

------------------
int x, y, max;

 

------------------
Line no: 10 statements : statement

------------------
int x, y, max;

 

------------------
Line no: 11 variable : ID

------------------
x

 

------------------
Line no: 11 factor : CONST_INT

------------------
10

 

------------------
Line no: 11 unary_expression : factor

------------------
10

 

------------------
Line no: 11 term : unary_expression

------------------
10

 

------------------
Line no: 11 simple_expression : term

------------------
10

 

------------------
Line no: 11 rel_expression : simple_expression

------------------
10

 

------------------
Line no: 11 logic_expression : rel_expression

------------------
10

 

------------------
Line no: 11 expression : variable ASSIGNOP logic_expression

------------------
x=10

 
 
MOV AX, 10
MOV x1_2, AX 


------------------
Line no: 11 expression_statement : expression SEMICOLON

------------------
x=10;

 
 
MOV AX, 10
MOV x1_2, AX 


------------------
Line no: 11 statement : expression_statement

------------------
x=10;

 
 
MOV AX, 10
MOV x1_2, AX 


------------------
Line no: 11 statements : statements statement

------------------
int x, y, max;
x=10;

 
 
 
MOV AX, 10
MOV x1_2, AX 


------------------
Line no: 12 variable : ID

------------------
y

 

------------------
Line no: 12 factor : CONST_INT

------------------
20

 

------------------
Line no: 12 unary_expression : factor

------------------
20

 

------------------
Line no: 12 term : unary_expression

------------------
20

 

------------------
Line no: 12 simple_expression : term

------------------
20

 

------------------
Line no: 12 rel_expression : simple_expression

------------------
20

 

------------------
Line no: 12 logic_expression : rel_expression

------------------
20

 

------------------
Line no: 12 expression : variable ASSIGNOP logic_expression

------------------
y=20

 
 
MOV AX, 20
MOV y1_2, AX 


------------------
Line no: 12 expression_statement : expression SEMICOLON

------------------
y=20;

 
 
MOV AX, 20
MOV y1_2, AX 


------------------
Line no: 12 statement : expression_statement

------------------
y=20;

 
 
MOV AX, 20
MOV y1_2, AX 


------------------
Line no: 12 statements : statements statement

------------------
int x, y, max;
x=10;
y=20;

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 


------------------
Line no: 13 variable : ID

------------------
max

 

------------------
Line no: 13 variable : ID

------------------
x

 

------------------
Line no: 13 factor : variable

------------------
x

 

------------------
Line no: 13 unary_expression : factor

------------------
x

 

------------------
Line no: 13 term : unary_expression

------------------
x

 

------------------
Line no: 13 simple_expression : term

------------------
x

 

------------------
Line no: 13 rel_expression : simple_expression

------------------
x

 

------------------
Line no: 13 logic_expression : rel_expression

------------------
x

 

------------------
Line no: 13 arguments : logic_expression

------------------
x

 

------------------
Line no: 13 variable : ID

------------------
y

 

------------------
Line no: 13 factor : variable

------------------
y

 

------------------
Line no: 13 unary_expression : factor

------------------
y

 

------------------
Line no: 13 term : unary_expression

------------------
y

 

------------------
Line no: 13 simple_expression : term

------------------
y

 

------------------
Line no: 13 rel_expression : simple_expression

------------------
y

 

------------------
Line no: 13 logic_expression : rel_expression

------------------
y

 

------------------
Line no: 13 arguments : arguments COMMA logic_expression

------------------
x, y

 

------------------
Line no: 13 argument_list : arguments

------------------
x, y

 

------------------
Line no: 13 factor : ID LPAREN argument_list RPAREN

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 unary_expression : factor

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 term : unary_expression

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 simple_expression : term

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 rel_expression : simple_expression

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 logic_expression : rel_expression

------------------
maxnum(x, y)

 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc

------------------
Line no: 13 expression : variable ASSIGNOP logic_expression

------------------
max=maxnum(x, y)

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


------------------
Line no: 13 expression_statement : expression SEMICOLON

------------------
max=maxnum(x, y);

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


------------------
Line no: 13 statement : expression_statement

------------------
max=maxnum(x, y);

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


------------------
Line no: 13 statements : statements statement

------------------
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


------------------
Line no: 14 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(max);

 

------------------
-1
Line no: 14 statements : statements statement

------------------
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);
printf(max);

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


MOV AX, max1_2
CALL OUTDEC


------------------
Line no: 15 compound_statement : LCURL statements RCURL

------------------
{
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);
printf(max);
}


 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


MOV AX, max1_2
CALL OUTDEC


------------------

ScopeTable #1_2
1 --> <x: ID> 
2 --> <y: ID> 
4 --> <max: ID> 

ScopeTable #1
1 --> <main: ID> 
4 --> <maxnum: ID> 
Line no: 15 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);
printf(max);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


MOV AX, max1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 15 unit : func_definition

------------------
int main ( ) {
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);
printf(max);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


MOV AX, max1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 15 program : program unit

------------------
int maxnum ( int a,int b ) {
if(a>=b){
return a;
}
else {
return b;
}

}

int main ( ) {
int x, y, max;
x=10;
y=20;
max=maxnum(x, y);
printf(max);
}


maxnum PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, b1_1
JGE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, a1_1

JMP L3
JMP L6
L5:
 
MOV AX, b1_1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
maxnum ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 10
MOV x1_2, AX 

 
 
MOV AX, 20
MOV y1_2, AX 

 
 
PUSH return_loc
PUSH x1_2
PUSH y1_2
CALL maxnum
POP return_loc
MOV AX, AX
MOV max1_2, AX 


MOV AX, max1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 16
Total errors: 0
