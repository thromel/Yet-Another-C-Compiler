Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int x

 

------------------

New ScopeTable #1_1 created
Line no: 2 variable : ID

------------------
x

 

------------------
Line no: 2 factor : variable

------------------
x

 

------------------
Line no: 2 unary_expression : factor

------------------
x

 

------------------
Line no: 2 term : unary_expression

------------------
x

 

------------------
Line no: 2 simple_expression : term

------------------
x

 

------------------
Line no: 2 factor : CONST_INT

------------------
1

 

------------------
Line no: 2 unary_expression : factor

------------------
1

 

------------------
Line no: 2 term : unary_expression

------------------
1

 

------------------
Line no: 2 simple_expression : term

------------------
1

 

------------------
Line no: 2 rel_expression : simple_expression RELOP simple_expression

------------------
x==1

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 logic_expression : rel_expression

------------------
x==1

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 expression : logic_expression

------------------
x==1

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------

New ScopeTable #1_1_1 created
Line no: 3 variable : ID

------------------
x

 

------------------
Line no: 3 factor : variable

------------------
x

 

------------------
Line no: 3 unary_expression : factor

------------------
x

 

------------------
Line no: 3 term : unary_expression

------------------
x

 

------------------
Line no: 3 simple_expression : term

------------------
x

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
x

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
x

 

------------------
Line no: 3 expression : logic_expression

------------------
x

 

------------------
Line no: 3 RETURN expression SEMICOLON

------------------
return x;

 
MOV AX, x1_1

JMP L3

------------------
Line no: 3 statements : statement

------------------
return x;

 
MOV AX, x1_1

JMP L3

------------------
Line no: 4 compound_statement : LCURL statements RCURL

------------------
{
return x;
}


 
MOV AX, x1_1

JMP L3

------------------

ScopeTable #1_1_1

ScopeTable #1_1
1 --> <x: ID> 

ScopeTable #1
4 --> <factorial: ID> 
Line no: 4 statement : compound_statement

------------------
{
return x;
}


 
MOV AX, x1_1

JMP L3

------------------

New ScopeTable #1_1_2 created
Line no: 5 variable : ID

------------------
x

 

------------------
Line no: 5 factor : variable

------------------
x

 

------------------
Line no: 5 unary_expression : factor

------------------
x

 

------------------
Line no: 5 term : unary_expression

------------------
x

 

------------------
Line no: 5 simple_expression : term

------------------
x

 

------------------
Line no: 5 factor : CONST_INT

------------------
1

 

------------------
Line no: 5 unary_expression : factor

------------------
1

 

------------------
Line no: 5 term : unary_expression

------------------
1

 

------------------
Line no: 5 simple expression : simple_expression ADDOP term

------------------
x+1

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
x+1

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
x+1

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX


------------------
Line no: 5 expression : logic_expression

------------------
x+1

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX


------------------
Line no: 5 RETURN expression SEMICOLON

------------------
return x+1;

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4

------------------
Line no: 5 statements : statement

------------------
return x+1;

 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4

------------------
Line no: 6 compound_statement : LCURL statements RCURL

------------------
{
return x+1;
}


 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4

------------------

ScopeTable #1_1_2

ScopeTable #1_1
1 --> <x: ID> 

ScopeTable #1
4 --> <factorial: ID> 
Line no: 6 statement : compound_statement

------------------
{
return x+1;
}


 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4

------------------
Line no: 6 IF LPAREN expression RPAREN statement ELSE statement

------------------
if(x==1){
return x;
}
else {
return x+1;
}


 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:


------------------
Line no: 6 statements : statement

------------------
if(x==1){
return x;
}
else {
return x+1;
}


 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:


------------------
Line no: 7 compound_statement : LCURL statements RCURL

------------------
{
if(x==1){
return x;
}
else {
return x+1;
}

}


 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:


------------------

ScopeTable #1_1
1 --> <x: ID> 

ScopeTable #1
4 --> <factorial: ID> 
Line no: 7 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int factorial ( int x ) {
if(x==1){
return x;
}
else {
return x+1;
}

}


factorial PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
factorial ENDP



------------------
Line no: 7 unit : func_definition

------------------
int factorial ( int x ) {
if(x==1){
return x;
}
else {
return x+1;
}

}


factorial PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
factorial ENDP



------------------
Line no: 7 program : unit

------------------
int factorial ( int x ) {
if(x==1){
return x;
}
else {
return x+1;
}

}


factorial PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
factorial ENDP



------------------

ScopeTable #1
4 --> <factorial: ID> 
Line no: 8 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 9 type_specifier	: INT

------------------
int

 

------------------
Line no: 9 declaration_list : ID

------------------
a

 

------------------
Line no: 9 declaration_list : declaration_list COMMA ID

------------------
a, b

 

------------------
Line no: 9 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int a, b;

 

------------------
Line no: 9 statement : var_declaration

------------------
int a, b;

 

------------------
Line no: 9 statements : statement

------------------
int a, b;

 

------------------
Line no: 10 variable : ID

------------------
a

 

------------------
Line no: 10 factor : CONST_INT

------------------
5

 

------------------
Line no: 10 unary_expression : factor

------------------
5

 

------------------
Line no: 10 term : unary_expression

------------------
5

 

------------------
Line no: 10 simple_expression : term

------------------
5

 

------------------
Line no: 10 rel_expression : simple_expression

------------------
5

 

------------------
Line no: 10 logic_expression : rel_expression

------------------
5

 

------------------
Line no: 10 expression : variable ASSIGNOP logic_expression

------------------
a=5

 
 
MOV AX, 5
MOV a1_2, AX 


------------------
Line no: 10 expression_statement : expression SEMICOLON

------------------
a=5;

 
 
MOV AX, 5
MOV a1_2, AX 


------------------
Line no: 10 statement : expression_statement

------------------
a=5;

 
 
MOV AX, 5
MOV a1_2, AX 


------------------
Line no: 10 statements : statements statement

------------------
int a, b;
a=5;

 
 
 
MOV AX, 5
MOV a1_2, AX 


------------------
Line no: 11 variable : ID

------------------
b

 

------------------
Line no: 11 variable : ID

------------------
a

 

------------------
Line no: 11 factor : variable

------------------
a

 

------------------
Line no: 11 unary_expression : factor

------------------
a

 

------------------
Line no: 11 term : unary_expression

------------------
a

 

------------------
Line no: 11 simple_expression : term

------------------
a

 

------------------
Line no: 11 rel_expression : simple_expression

------------------
a

 

------------------
Line no: 11 logic_expression : rel_expression

------------------
a

 

------------------
Line no: 11 arguments : logic_expression

------------------
a

 

------------------
Line no: 11 argument_list : arguments

------------------
a

 

------------------
Line no: 11 factor : ID LPAREN argument_list RPAREN

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 unary_expression : factor

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 term : unary_expression

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 simple_expression : term

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 rel_expression : simple_expression

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 logic_expression : rel_expression

------------------
factorial(a)

 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc

------------------
Line no: 11 expression : variable ASSIGNOP logic_expression

------------------
b=factorial(a)

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


------------------
Line no: 11 expression_statement : expression SEMICOLON

------------------
b=factorial(a);

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


------------------
Line no: 11 statement : expression_statement

------------------
b=factorial(a);

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


------------------
Line no: 11 statements : statements statement

------------------
int a, b;
a=5;
b=factorial(a);

 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


------------------
Line no: 12 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(b);

 

------------------
-1
Line no: 12 statements : statements statement

------------------
int a, b;
a=5;
b=factorial(a);
printf(b);

 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


MOV AX, b1_2
CALL OUTDEC


------------------
Line no: 13 compound_statement : LCURL statements RCURL

------------------
{
int a, b;
a=5;
b=factorial(a);
printf(b);
}


 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


MOV AX, b1_2
CALL OUTDEC


------------------

ScopeTable #1_2
0 --> <b: ID> 
6 --> <a: ID> 

ScopeTable #1
1 --> <main: ID> 
4 --> <factorial: ID> 
Line no: 13 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int a, b;
a=5;
b=factorial(a);
printf(b);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


MOV AX, b1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 13 unit : func_definition

------------------
int main ( ) {
int a, b;
a=5;
b=factorial(a);
printf(b);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


MOV AX, b1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 13 program : program unit

------------------
int factorial ( int x ) {
if(x==1){
return x;
}
else {
return x+1;
}

}

int main ( ) {
int a, b;
a=5;
b=factorial(a);
printf(b);
}


factorial PROC

POP return_loc
POP x1_1
PUSH BX
PUSH CX
PUSH DX

 
 
MOV AX, x1_1
CMP AX, 1
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L5
 
MOV AX, x1_1

JMP L3
JMP L6
L5:
 
 
MOV AX, x1_1
ADD AX, 1
MOV temp1, AX

MOV AX, temp1

JMP L4
L6:

L4: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
factorial ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 5
MOV a1_2, AX 

 
 
PUSH return_loc
PUSH a1_2
CALL factorial
POP return_loc
MOV AX, AX
MOV b1_2, AX 


MOV AX, b1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 14
Total errors: 0
