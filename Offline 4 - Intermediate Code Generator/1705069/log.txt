Line no: 1 type_specifier	: VOID

------------------
void

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int n

 

------------------

New ScopeTable #1_1 created
Line no: 2 type_specifier	: INT

------------------
int

 

------------------
Line no: 2 declaration_list : ID

------------------
i

 

------------------
Line no: 2 declaration_list : declaration_list COMMA ID

------------------
i, fact

 

------------------
Line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int i, fact;

 

------------------
Line no: 2 statement : var_declaration

------------------
int i, fact;

 

------------------
Line no: 2 statements : statement

------------------
int i, fact;

 

------------------
Line no: 3 variable : ID

------------------
fact

 

------------------
Line no: 3 factor : CONST_INT

------------------
1

 

------------------
Line no: 3 unary_expression : factor

------------------
1

 

------------------
Line no: 3 term : unary_expression

------------------
1

 

------------------
Line no: 3 simple_expression : term

------------------
1

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 3 expression : variable ASSIGNOP logic_expression

------------------
fact=1

 
 
MOV AX, 1
MOV fact1_1, AX 


------------------
Line no: 3 expression_statement : expression SEMICOLON

------------------
fact=1;

 
 
MOV AX, 1
MOV fact1_1, AX 


------------------
Line no: 3 statement : expression_statement

------------------
fact=1;

 
 
MOV AX, 1
MOV fact1_1, AX 


------------------
Line no: 3 statements : statements statement

------------------
int i, fact;
fact=1;

 
 
 
MOV AX, 1
MOV fact1_1, AX 


------------------
Line no: 4 variable : ID

------------------
i

 

------------------
Line no: 4 variable : ID

------------------
fact

 

------------------
Line no: 4 factor : variable

------------------
fact

 

------------------
Line no: 4 unary_expression : factor

------------------
fact

 

------------------
Line no: 4 term : unary_expression

------------------
fact

 

------------------
Line no: 4 simple_expression : term

------------------
fact

 

------------------
Line no: 4 rel_expression : simple_expression

------------------
fact

 

------------------
Line no: 4 logic_expression : rel_expression

------------------
fact

 

------------------
Line no: 4 expression : variable ASSIGNOP logic_expression

------------------
i=fact

 
 
MOV AX, fact1_1
MOV i1_1, AX 


------------------
Line no: 4 expression_statement : expression SEMICOLON

------------------
i=fact;

 
 
MOV AX, fact1_1
MOV i1_1, AX 


------------------
Line no: 4 statement : expression_statement

------------------
i=fact;

 
 
MOV AX, fact1_1
MOV i1_1, AX 


------------------
Line no: 4 statements : statements statement

------------------
int i, fact;
fact=1;
i=fact;

 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 


------------------
Line no: 5 variable : ID

------------------
i

 

------------------
Line no: 5 factor : CONST_INT

------------------
1

 

------------------
Line no: 5 unary_expression : factor

------------------
1

 

------------------
Line no: 5 term : unary_expression

------------------
1

 

------------------
Line no: 5 simple_expression : term

------------------
1

 

------------------
Line no: 5 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 5 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 5 expression : variable ASSIGNOP logic_expression

------------------
i=1

 
 
MOV AX, 1
MOV i1_1, AX 


------------------
Line no: 5 expression_statement : expression SEMICOLON

------------------
i=1;

 
 
MOV AX, 1
MOV i1_1, AX 


------------------
Line no: 5 variable : ID

------------------
i

 

------------------
Line no: 5 factor : variable

------------------
i

 

------------------
Line no: 5 unary_expression : factor

------------------
i

 

------------------
Line no: 5 term : unary_expression

------------------
i

 

------------------
Line no: 5 simple_expression : term

------------------
i

 

------------------
Line no: 5 variable : ID

------------------
n

 

------------------
Line no: 5 factor : variable

------------------
n

 

------------------
Line no: 5 unary_expression : factor

------------------
n

 

------------------
Line no: 5 term : unary_expression

------------------
n

 

------------------
Line no: 5 simple_expression : term

------------------
n

 

------------------
Line no: 5 rel_expression : simple_expression RELOP simple_expression

------------------
i<=n

 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 5 logic_expression : rel_expression

------------------
i<=n

 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 5 expression : logic_expression

------------------
i<=n

 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 5 expression_statement : expression SEMICOLON

------------------
i<=n;

 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 5 variable : ID

------------------
i

 

------------------
Line no: 5 factor : variable INCOP

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 unary_expression : factor

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 term : unary_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 simple_expression : term

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 5 expression : logic_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------

New ScopeTable #1_1_1 created
Line no: 6 variable : ID

------------------
fact

 

------------------
Line no: 6 variable : ID

------------------
fact

 

------------------
Line no: 6 factor : variable

------------------
fact

 

------------------
Line no: 6 unary_expression : factor

------------------
fact

 

------------------
Line no: 6 term : unary_expression

------------------
fact

 

------------------
Line no: 6 variable : ID

------------------
i

 

------------------
Line no: 6 factor : variable

------------------
i

 

------------------
Line no: 6 unary_expression : factor

------------------
i

 

------------------
Line no: 6 term : term MULOP unary_expression

------------------
fact*i

 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX


------------------
Line no: 6 simple_expression : term

------------------
fact*i

 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX


------------------
Line no: 6 rel_expression : simple_expression

------------------
fact*i

 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX


------------------
Line no: 6 logic_expression : rel_expression

------------------
fact*i

 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX


------------------
Line no: 6 expression : variable ASSIGNOP logic_expression

------------------
fact=fact*i

 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


------------------
Line no: 6 expression_statement : expression SEMICOLON

------------------
fact=fact*i;

 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


------------------
Line no: 6 statement : expression_statement

------------------
fact=fact*i;

 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


------------------
Line no: 6 statements : statement

------------------
fact=fact*i;

 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


------------------
Line no: 7 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(fact);

 

------------------
2
Line no: 7 statements : statements statement

------------------
fact=fact*i;
printf(fact);

 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC


------------------
Line no: 8 compound_statement : LCURL statements RCURL

------------------
{
fact=fact*i;
printf(fact);
}


 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC


------------------

ScopeTable #1_1_1

ScopeTable #1_1
0 --> <i: ID> 
1 --> <fact: ID> 
5 --> <n: ID> 

ScopeTable #1
1 --> <fact: ID> 
Line no: 8 statement : compound_statement

------------------
{
fact=fact*i;
printf(fact);
}


 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC


------------------
Line no: 8 FOR LPAREN expression_statement expression_statement expression RPAREN statement

------------------
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}


 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end

------------------
Line no: 8 statements : statements statement

------------------
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}


 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end

------------------
Line no: 9 compound_statement : LCURL statements RCURL

------------------
{
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}

}


 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end

------------------

ScopeTable #1_1
0 --> <i: ID> 
1 --> <fact: ID> 
5 --> <n: ID> 

ScopeTable #1
1 --> <fact: ID> 
Line no: 9 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
void fact ( int n ) {
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}

}


fact PROC

POP return_loc
POP n1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end
L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
fact ENDP



------------------
Line no: 9 unit : func_definition

------------------
void fact ( int n ) {
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}

}


fact PROC

POP return_loc
POP n1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end
L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
fact ENDP



------------------
Line no: 9 program : unit

------------------
void fact ( int n ) {
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}

}


fact PROC

POP return_loc
POP n1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end
L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
fact ENDP



------------------

ScopeTable #1
1 --> <fact: ID> 
Line no: 11 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 12 factor : CONST_INT

------------------
10

 

------------------
Line no: 12 unary_expression : factor

------------------
10

 

------------------
Line no: 12 term : unary_expression

------------------
10

 

------------------
Line no: 12 simple_expression : term

------------------
10

 

------------------
Line no: 12 rel_expression : simple_expression

------------------
10

 

------------------
Line no: 12 logic_expression : rel_expression

------------------
10

 

------------------
Line no: 12 arguments : logic_expression

------------------
10

 

------------------
Line no: 12 argument_list : arguments

------------------
10

 

------------------
Line no: 12 factor : ID LPAREN argument_list RPAREN

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 unary_expression : factor

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 term : unary_expression

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 simple_expression : term

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 rel_expression : simple_expression

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 logic_expression : rel_expression

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 expression : logic_expression

------------------
fact(10)

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 expression_statement : expression SEMICOLON

------------------
fact(10);

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 statement : expression_statement

------------------
fact(10);

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 12 statements : statement

------------------
fact(10);

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------
Line no: 13 compound_statement : LCURL statements RCURL

------------------
{
fact(10);
}


 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc

------------------

ScopeTable #1_2

ScopeTable #1
1 --> <fact: ID>  <main: ID> 
Line no: 13 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
fact(10);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 13 unit : func_definition

------------------
int main ( ) {
fact(10);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 13 program : program unit

------------------
void fact ( int n ) {
int i, fact;
fact=1;
i=fact;
for(i=1;i<=n;i++){
fact=fact*i;
printf(fact);
}

}

int main ( ) {
fact(10);
}


fact PROC

POP return_loc
POP n1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 1
MOV fact1_1, AX 

 
 
MOV AX, fact1_1
MOV i1_1, AX 

 
;for loop start
 
 
MOV AX, 1
MOV i1_1, AX 

L3:
 
 
MOV AX, i1_1
CMP AX, n1_1
JLE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 0
JE L4
 
 
 
 
MOV AX, fact1_1
MOV BX, i1_1
IMUL BX
MOV temp1, AX

MOV AX, temp1
MOV fact1_1, AX 


MOV AX, fact1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L3
L4:
;for loop end
L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
fact ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
PUSH return_loc
PUSH 10
CALL fact
POP return_loc
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 13
Total errors: 0
