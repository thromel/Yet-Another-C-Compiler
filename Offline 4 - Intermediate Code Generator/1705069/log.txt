Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int n

 

------------------

New ScopeTable #1_1 created
Line no: 2 variable : ID

------------------
n

 

------------------
Line no: 2 factor : variable

------------------
n

 

------------------
Line no: 2 unary_expression : factor

------------------
n

 

------------------
Line no: 2 term : unary_expression

------------------
n

 

------------------
Line no: 2 simple_expression : term

------------------
n

 

------------------
Line no: 2 factor : CONST_INT

------------------
0

 

------------------
Line no: 2 unary_expression : factor

------------------
0

 

------------------
Line no: 2 term : unary_expression

------------------
0

 

------------------
Line no: 2 simple_expression : term

------------------
0

 

------------------
Line no: 2 rel_expression : simple_expression RELOP simple_expression

------------------
n==0

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 logic_expression : rel_expression

------------------
n==0

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 2 expression : logic_expression

------------------
n==0

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 


------------------
Line no: 3 factor : CONST_INT

------------------
1

 

------------------
Line no: 3 unary_expression : factor

------------------
1

 

------------------
Line no: 3 term : unary_expression

------------------
1

 

------------------
Line no: 3 simple_expression : term

------------------
1

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 3 expression : logic_expression

------------------
1

 

------------------
Line no: 3 RETURN expression SEMICOLON

------------------
return 1;

 
MOV CX, 1

JMP L0

------------------
Line no: 4 IF LPAREN expression RPAREN statement

------------------
if(n==0)return 1;

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:


------------------
Line no: 4 statements : statement

------------------
if(n==0)return 1;

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:


------------------
Line no: 4 variable : ID

------------------
n

 

------------------
Line no: 4 factor : variable

------------------
n

 

------------------
Line no: 4 unary_expression : factor

------------------
n

 

------------------
Line no: 4 term : unary_expression

------------------
n

 

------------------
Line no: 4 variable : ID

------------------
n

 

------------------
Line no: 4 factor : variable

------------------
n

 

------------------
Line no: 4 unary_expression : factor

------------------
n

 

------------------
Line no: 4 term : unary_expression

------------------
n

 

------------------
Line no: 4 simple_expression : term

------------------
n

 

------------------
Line no: 4 factor : CONST_INT

------------------
1

 

------------------
Line no: 4 unary_expression : factor

------------------
1

 

------------------
Line no: 4 term : unary_expression

------------------
1

 

------------------
Line no: 4 simple expression : simple_expression ADDOP term

------------------
n-1

 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX


------------------
Line no: 4 rel_expression : simple_expression

------------------
n-1

 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX


------------------
Line no: 4 logic_expression : rel_expression

------------------
n-1

 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX


------------------
Line no: 4 arguments : logic_expression

------------------
n-1

 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX


------------------
Line no: 4 argument_list : arguments

------------------
n-1

 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX


------------------
Line no: 4 factor : ID LPAREN argument_list RPAREN

------------------
rec(n-1)

 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 4 unary_expression : factor

------------------
rec(n-1)

 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 4 term : term MULOP unary_expression

------------------
n*rec(n-1)

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX


------------------
Line no: 4 simple_expression : term

------------------
n*rec(n-1)

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX


------------------
Line no: 4 rel_expression : simple_expression

------------------
n*rec(n-1)

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX


------------------
Line no: 4 logic_expression : rel_expression

------------------
n*rec(n-1)

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX


------------------
Line no: 4 expression : logic_expression

------------------
n*rec(n-1)

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX


------------------
Line no: 4 RETURN expression SEMICOLON

------------------
return n*rec(n-1);

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0

------------------
Line no: 4 statements : statements statement

------------------
if(n==0)return 1;
return n*rec(n-1);

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0

------------------
Line no: 5 compound_statement : LCURL statements RCURL

------------------
{
if(n==0)return 1;
return n*rec(n-1);
}


 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0

------------------

ScopeTable #1_1
5 --> <n: ID> 

ScopeTable #1
6 --> <rec: ID> 
Line no: 5 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int rec ( int n ) {
if(n==0)return 1;
return n*rec(n-1);
}


rec PROC

POP return_loc
POP n1_1
PUSH BX
PUSH DX

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
rec ENDP



------------------
Line no: 5 unit : func_definition

------------------
int rec ( int n ) {
if(n==0)return 1;
return n*rec(n-1);
}


rec PROC

POP return_loc
POP n1_1
PUSH BX
PUSH DX

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
rec ENDP



------------------
Line no: 5 program : unit

------------------
int rec ( int n ) {
if(n==0)return 1;
return n*rec(n-1);
}


rec PROC

POP return_loc
POP n1_1
PUSH BX
PUSH DX

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
rec ENDP



------------------

ScopeTable #1
6 --> <rec: ID> 
Line no: 7 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 8 type_specifier	: INT

------------------
int

 

------------------
Line no: 8 declaration_list : ID

------------------
x

 

------------------
Line no: 8 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int x;

 

------------------
Line no: 8 statement : var_declaration

------------------
int x;

 

------------------
Line no: 8 statements : statement

------------------
int x;

 

------------------
Line no: 9 variable : ID

------------------
x

 

------------------
Line no: 9 factor : CONST_INT

------------------
7

 

------------------
Line no: 9 unary_expression : factor

------------------
7

 

------------------
Line no: 9 term : unary_expression

------------------
7

 

------------------
Line no: 9 simple_expression : term

------------------
7

 

------------------
Line no: 9 rel_expression : simple_expression

------------------
7

 

------------------
Line no: 9 logic_expression : rel_expression

------------------
7

 

------------------
Line no: 9 arguments : logic_expression

------------------
7

 

------------------
Line no: 9 argument_list : arguments

------------------
7

 

------------------
Line no: 9 factor : ID LPAREN argument_list RPAREN

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 unary_expression : factor

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 term : unary_expression

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 simple_expression : term

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 rel_expression : simple_expression

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 logic_expression : rel_expression

------------------
rec(7)

 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1

------------------
Line no: 9 expression : variable ASSIGNOP logic_expression

------------------
x=rec(7)

 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 9 expression_statement : expression SEMICOLON

------------------
x=rec(7);

 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 9 statement : expression_statement

------------------
x=rec(7);

 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 9 statements : statements statement

------------------
int x;
x=rec(7);

 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 10 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(x);

 

------------------
-1
Line no: 10 statements : statements statement

------------------
int x;
x=rec(7);
printf(x);

 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC


------------------
Line no: 11 compound_statement : LCURL statements RCURL

------------------
{
int x;
x=rec(7);
printf(x);
}


 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC


------------------

ScopeTable #1_2
1 --> <x: ID> 

ScopeTable #1
1 --> <main: ID> 
6 --> <rec: ID> 
Line no: 11 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int x;
x=rec(7);
printf(x);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 11 unit : func_definition

------------------
int main ( ) {
int x;
x=rec(7);
printf(x);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 11 program : program unit

------------------
int rec ( int n ) {
if(n==0)return 1;
return n*rec(n-1);
}

int main ( ) {
int x;
x=rec(7);
printf(x);
}


rec PROC

POP return_loc
POP n1_1
PUSH BX
PUSH DX

 
 
MOV AX, n1_1
CMP AX, 0
JE L1
MOV temp0, 0
JMP L2
L1: 
MOV temp0, 1
L2: 

MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 1

JMP L0
L3:

 
 
 
 
 
MOV AX, n1_1
SUB AX, 1
MOV temp0, AX

PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH temp0
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, n1_1
MOV BX, CX
IMUL BX
MOV temp0, AX

MOV CX, temp0

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
rec ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
PUSH n1_1
PUSH temp0
PUSH return_loc
PUSH 7
CALL rec
POP return_loc
POP temp0
POP n1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 11
Total errors: 0
-------------------------------------
Optimizer log: 
Removed blank line : 18
Removed blank line : 19
Removed blank line : 32
Removed blank line : 38
Removed blank line : 39
Removed blank line : 40
Removed blank line : 41
Removed blank line : 42
Removed blank line : 76
Removed blank line : 77
Removed blank line : 78
Removed blank line : 79
Optimized redundant MOV operation: 92
Line removed:13
-------------------------------------

ScopeTable #1
1 --> <main: ID> 
6 --> <rec: ID> 
