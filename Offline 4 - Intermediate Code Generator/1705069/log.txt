Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int a

 

------------------

New ScopeTable #1_1 created
Line no: 2 factor : CONST_INT

------------------
2

 

------------------
Line no: 2 unary_expression : factor

------------------
2

 

------------------
Line no: 2 term : unary_expression

------------------
2

 

------------------
Line no: 2 variable : ID

------------------
a

 

------------------
Line no: 2 factor : variable

------------------
a

 

------------------
Line no: 2 unary_expression : factor

------------------
a

 

------------------
Line no: 2 term : term MULOP unary_expression

------------------
2*a

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX


------------------
Line no: 2 simple_expression : term

------------------
2*a

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX


------------------
Line no: 2 rel_expression : simple_expression

------------------
2*a

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX


------------------
Line no: 2 logic_expression : rel_expression

------------------
2*a

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX


------------------
Line no: 2 expression : logic_expression

------------------
2*a

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX


------------------
Line no: 2 RETURN expression SEMICOLON

------------------
return 2*a;

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0

------------------
Line no: 2 statements : statement

------------------
return 2*a;

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0

------------------
Line no: 3 variable : ID

------------------
a

 

------------------
Line no: 3 factor : CONST_INT

------------------
9

 

------------------
Line no: 3 unary_expression : factor

------------------
9

 

------------------
Line no: 3 term : unary_expression

------------------
9

 

------------------
Line no: 3 simple_expression : term

------------------
9

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
9

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
9

 

------------------
Line no: 3 expression : variable ASSIGNOP logic_expression

------------------
a=9

 
 
MOV AX, 9
MOV a1_1, AX 


------------------
Line no: 3 expression_statement : expression SEMICOLON

------------------
a=9;

 
 
MOV AX, 9
MOV a1_1, AX 


------------------
Line no: 3 statement : expression_statement

------------------
a=9;

 
 
MOV AX, 9
MOV a1_1, AX 


------------------
Line no: 3 statements : statements statement

------------------
return 2*a;
a=9;

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 


------------------
Line no: 4 compound_statement : LCURL statements RCURL

------------------
{
return 2*a;
a=9;
}


 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 


------------------

ScopeTable #1_1
6 --> <a: ID> 

ScopeTable #1
4 --> <f: ID> 
Line no: 4 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int f ( int a ) {
return 2*a;
a=9;
}


f PROC

POP return_loc
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
f ENDP



------------------
Line no: 4 unit : func_definition

------------------
int f ( int a ) {
return 2*a;
a=9;
}


f PROC

POP return_loc
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
f ENDP



------------------
Line no: 4 program : unit

------------------
int f ( int a ) {
return 2*a;
a=9;
}


f PROC

POP return_loc
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
f ENDP



------------------

ScopeTable #1
4 --> <f: ID> 
Line no: 6 type_specifier	: INT

------------------
int

 

------------------
Line no: 6 type_specifier	: INT

------------------
int

 

------------------
Line no: 6 parameter_list : type_specifier ID

------------------
int a

 

------------------
Line no: 6 type_specifier	: INT

------------------
int

 

------------------
Line no: 6 parameter_list : parameter_list COMMA type_specifier ID

------------------
int a,int b

 

------------------

New ScopeTable #1_2 created
Line no: 7 type_specifier	: INT

------------------
int

 

------------------
Line no: 7 declaration_list : ID

------------------
x

 

------------------
Line no: 7 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int x;

 

------------------
Line no: 7 statement : var_declaration

------------------
int x;

 

------------------
Line no: 7 statements : statement

------------------
int x;

 

------------------
Line no: 8 variable : ID

------------------
x

 

------------------
Line no: 8 variable : ID

------------------
a

 

------------------
Line no: 8 factor : variable

------------------
a

 

------------------
Line no: 8 unary_expression : factor

------------------
a

 

------------------
Line no: 8 term : unary_expression

------------------
a

 

------------------
Line no: 8 simple_expression : term

------------------
a

 

------------------
Line no: 8 rel_expression : simple_expression

------------------
a

 

------------------
Line no: 8 logic_expression : rel_expression

------------------
a

 

------------------
Line no: 8 arguments : logic_expression

------------------
a

 

------------------
Line no: 8 argument_list : arguments

------------------
a

 

------------------
Line no: 8 factor : ID LPAREN argument_list RPAREN

------------------
f(a)

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc

------------------
Line no: 8 unary_expression : factor

------------------
f(a)

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc

------------------
Line no: 8 term : unary_expression

------------------
f(a)

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc

------------------
Line no: 8 simple_expression : term

------------------
f(a)

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc

------------------
Line no: 8 variable : ID

------------------
a

 

------------------
Line no: 8 factor : variable

------------------
a

 

------------------
Line no: 8 unary_expression : factor

------------------
a

 

------------------
Line no: 8 term : unary_expression

------------------
a

 

------------------
Line no: 8 simple expression : simple_expression ADDOP term

------------------
f(a)+a

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX


------------------
Line no: 8 variable : ID

------------------
b

 

------------------
Line no: 8 factor : variable

------------------
b

 

------------------
Line no: 8 unary_expression : factor

------------------
b

 

------------------
Line no: 8 term : unary_expression

------------------
b

 

------------------
Line no: 8 simple expression : simple_expression ADDOP term

------------------
f(a)+a+b

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX


------------------
Line no: 8 rel_expression : simple_expression

------------------
f(a)+a+b

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX


------------------
Line no: 8 logic_expression : rel_expression

------------------
f(a)+a+b

 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX


------------------
Line no: 8 expression : variable ASSIGNOP logic_expression

------------------
x=f(a)+a+b

 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 


------------------
Line no: 8 expression_statement : expression SEMICOLON

------------------
x=f(a)+a+b;

 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 


------------------
Line no: 8 statement : expression_statement

------------------
x=f(a)+a+b;

 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 


------------------
Line no: 8 statements : statements statement

------------------
int x;
x=f(a)+a+b;

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 


------------------
Line no: 9 variable : ID

------------------
x

 

------------------
Line no: 9 factor : variable

------------------
x

 

------------------
Line no: 9 unary_expression : factor

------------------
x

 

------------------
Line no: 9 term : unary_expression

------------------
x

 

------------------
Line no: 9 simple_expression : term

------------------
x

 

------------------
Line no: 9 rel_expression : simple_expression

------------------
x

 

------------------
Line no: 9 logic_expression : rel_expression

------------------
x

 

------------------
Line no: 9 expression : logic_expression

------------------
x

 

------------------
Line no: 9 RETURN expression SEMICOLON

------------------
return x;

 
MOV AX, x1_2

JMP L1

------------------
Line no: 9 statements : statements statement

------------------
int x;
x=f(a)+a+b;
return x;

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1

------------------
Line no: 10 compound_statement : LCURL statements RCURL

------------------
{
int x;
x=f(a)+a+b;
return x;
}


 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1

------------------

ScopeTable #1_2
0 --> <b: ID> 
1 --> <x: ID> 
6 --> <a: ID> 

ScopeTable #1
4 --> <f: ID> 
5 --> <g: ID> 
Line no: 10 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int g ( int a,int b ) {
int x;
x=f(a)+a+b;
return x;
}


g PROC

POP return_loc
POP b1_2
POP a1_2
PUSH BX
PUSH CX
PUSH DX

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1
L1: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
g ENDP



------------------
Line no: 10 unit : func_definition

------------------
int g ( int a,int b ) {
int x;
x=f(a)+a+b;
return x;
}


g PROC

POP return_loc
POP b1_2
POP a1_2
PUSH BX
PUSH CX
PUSH DX

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1
L1: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
g ENDP



------------------
Line no: 10 program : program unit

------------------
int f ( int a ) {
return 2*a;
a=9;
}

int g ( int a,int b ) {
int x;
x=f(a)+a+b;
return x;
}


f PROC

POP return_loc
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
f ENDP


g PROC

POP return_loc
POP b1_2
POP a1_2
PUSH BX
PUSH CX
PUSH DX

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1
L1: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
g ENDP



------------------
Line no: 12 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_3 created
Line no: 13 type_specifier	: INT

------------------
int

 

------------------
Line no: 13 declaration_list : ID

------------------
a

 

------------------
Line no: 13 declaration_list : declaration_list COMMA ID

------------------
a, b

 

------------------
Line no: 13 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int a, b;

 

------------------
Line no: 13 statement : var_declaration

------------------
int a, b;

 

------------------
Line no: 13 statements : statement

------------------
int a, b;

 

------------------
Line no: 14 variable : ID

------------------
a

 

------------------
Line no: 14 factor : CONST_INT

------------------
1

 

------------------
Line no: 14 unary_expression : factor

------------------
1

 

------------------
Line no: 14 term : unary_expression

------------------
1

 

------------------
Line no: 14 simple_expression : term

------------------
1

 

------------------
Line no: 14 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 14 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 14 expression : variable ASSIGNOP logic_expression

------------------
a=1

 
 
MOV AX, 1
MOV a1_3, AX 


------------------
Line no: 14 expression_statement : expression SEMICOLON

------------------
a=1;

 
 
MOV AX, 1
MOV a1_3, AX 


------------------
Line no: 14 statement : expression_statement

------------------
a=1;

 
 
MOV AX, 1
MOV a1_3, AX 


------------------
Line no: 14 statements : statements statement

------------------
int a, b;
a=1;

 
 
 
MOV AX, 1
MOV a1_3, AX 


------------------
Line no: 15 variable : ID

------------------
b

 

------------------
Line no: 15 factor : CONST_INT

------------------
2

 

------------------
Line no: 15 unary_expression : factor

------------------
2

 

------------------
Line no: 15 term : unary_expression

------------------
2

 

------------------
Line no: 15 simple_expression : term

------------------
2

 

------------------
Line no: 15 rel_expression : simple_expression

------------------
2

 

------------------
Line no: 15 logic_expression : rel_expression

------------------
2

 

------------------
Line no: 15 expression : variable ASSIGNOP logic_expression

------------------
b=2

 
 
MOV AX, 2
MOV b1_3, AX 


------------------
Line no: 15 expression_statement : expression SEMICOLON

------------------
b=2;

 
 
MOV AX, 2
MOV b1_3, AX 


------------------
Line no: 15 statement : expression_statement

------------------
b=2;

 
 
MOV AX, 2
MOV b1_3, AX 


------------------
Line no: 15 statements : statements statement

------------------
int a, b;
a=1;
b=2;

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 


------------------
Line no: 16 variable : ID

------------------
a

 

------------------
Line no: 16 variable : ID

------------------
a

 

------------------
Line no: 16 factor : variable

------------------
a

 

------------------
Line no: 16 unary_expression : factor

------------------
a

 

------------------
Line no: 16 term : unary_expression

------------------
a

 

------------------
Line no: 16 simple_expression : term

------------------
a

 

------------------
Line no: 16 rel_expression : simple_expression

------------------
a

 

------------------
Line no: 16 logic_expression : rel_expression

------------------
a

 

------------------
Line no: 16 arguments : logic_expression

------------------
a

 

------------------
Line no: 16 variable : ID

------------------
b

 

------------------
Line no: 16 factor : variable

------------------
b

 

------------------
Line no: 16 unary_expression : factor

------------------
b

 

------------------
Line no: 16 term : unary_expression

------------------
b

 

------------------
Line no: 16 simple_expression : term

------------------
b

 

------------------
Line no: 16 rel_expression : simple_expression

------------------
b

 

------------------
Line no: 16 logic_expression : rel_expression

------------------
b

 

------------------
Line no: 16 arguments : arguments COMMA logic_expression

------------------
a, b

 

------------------
Line no: 16 argument_list : arguments

------------------
a, b

 

------------------
Line no: 16 factor : ID LPAREN argument_list RPAREN

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 unary_expression : factor

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 term : unary_expression

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 simple_expression : term

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 rel_expression : simple_expression

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 logic_expression : rel_expression

------------------
g(a, b)

 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc

------------------
Line no: 16 expression : variable ASSIGNOP logic_expression

------------------
a=g(a, b)

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


------------------
Line no: 16 expression_statement : expression SEMICOLON

------------------
a=g(a, b);

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


------------------
Line no: 16 statement : expression_statement

------------------
a=g(a, b);

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


------------------
Line no: 16 statements : statements statement

------------------
int a, b;
a=1;
b=2;
a=g(a, b);

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


------------------
Line no: 17 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(a);

 

------------------
-1
Line no: 17 statements : statements statement

------------------
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC


------------------
Line no: 18 factor : CONST_INT

------------------
0

 

------------------
Line no: 18 unary_expression : factor

------------------
0

 

------------------
Line no: 18 term : unary_expression

------------------
0

 

------------------
Line no: 18 simple_expression : term

------------------
0

 

------------------
Line no: 18 rel_expression : simple_expression

------------------
0

 

------------------
Line no: 18 logic_expression : rel_expression

------------------
0

 

------------------
Line no: 18 expression : logic_expression

------------------
0

 

------------------
Line no: 18 RETURN expression SEMICOLON

------------------
return 0;

 

------------------
Line no: 18 statements : statements statement

------------------
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);
return 0;

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC

 

------------------
Line no: 19 compound_statement : LCURL statements RCURL

------------------
{
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);
return 0;
}


 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC

 

------------------

ScopeTable #1_3
0 --> <b: ID> 
6 --> <a: ID> 

ScopeTable #1
1 --> <main: ID> 
4 --> <f: ID> 
5 --> <g: ID> 
Line no: 19 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);
return 0;
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC

 
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 19 unit : func_definition

------------------
int main ( ) {
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);
return 0;
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC

 
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 19 program : program unit

------------------
int f ( int a ) {
return 2*a;
a=9;
}

int g ( int a,int b ) {
int x;
x=f(a)+a+b;
return x;
}

int main ( ) {
int a, b;
a=1;
b=2;
a=g(a, b);
printf(a);
return 0;
}


f PROC

POP return_loc
POP a1_1
PUSH BX
PUSH CX
PUSH DX

 
 
 
MOV AX, 2
MOV BX, a1_1
IMUL BX
MOV temp0, AX

MOV AX, temp0

JMP L0
 
 
MOV AX, 9
MOV a1_1, AX 

L0: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
f ENDP


g PROC

POP return_loc
POP b1_2
POP a1_2
PUSH BX
PUSH CX
PUSH DX

 
 
 
PUSH return_loc
PUSH a1_2
CALL f
POP return_loc
 
MOV AX, AX
ADD AX, a1_2
MOV temp1, AX

 
MOV AX, temp1
ADD AX, b1_2
MOV temp2, AX

MOV AX, temp2
MOV x1_2, AX 

 
MOV AX, x1_2

JMP L1
L1: 
POP DX
POP CX
POP BX
PUSH return_loc
RET
g ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV AX, 1
MOV a1_3, AX 

 
 
MOV AX, 2
MOV b1_3, AX 

 
 
PUSH return_loc
PUSH a1_3
PUSH b1_3
CALL g
POP return_loc
MOV AX, AX
MOV a1_3, AX 


MOV AX, a1_3
CALL OUTDEC

 
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 19
Total errors: 0
-------------------------------------
Optimizer log: 
Removed blank line : 25
Removed blank line : 26
Removed blank line : 27
Optimized redundant MOV operation: 33
Removed blank line : 36
Removed blank line : 37
Removed blank line : 59
Removed blank line : 60
Removed blank line : 61
Removed blank line : 66
Optimized redundant MOV operation: 67
Removed blank line : 71
Optimized redundant MOV operation: 72
Optimized redundant MOV operation: 76
Removed blank line : 79
Optimized redundant MOV operation: 80
Removed blank line : 97
Removed blank line : 98
Removed blank line : 99
Removed blank line : 103
Removed blank line : 104
Removed blank line : 108
Removed blank line : 109
Optimized redundant MOV operation: 115
Optimized redundant MOV operation: 119
Removed blank line : 122
Line removed:26
-------------------------------------

ScopeTable #1
1 --> <main: ID> 
4 --> <f: ID> 
5 --> <g: ID> 
