Line no: 1 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_1 created
Line no: 2 type_specifier	: INT

------------------
int

 

------------------
Line no: 2 declaration_list :ID LTHIRD CONST_INT RTHIRD 

------------------
c[21]

 

------------------
Line no: 2 declaration_list : declaration_list COMMA ID

------------------
c[21], i

 

------------------
Line no: 2 declaration_list : declaration_list COMMA ID

------------------
c[21], i, b

 

------------------
Line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int c[21], i, b;

 

------------------
Line no: 2 statement : var_declaration

------------------
int c[21], i, b;

 

------------------
Line no: 2 statements : statement

------------------
int c[21], i, b;

 

------------------
Line no: 3 factor : CONST_INT

------------------
0

 

------------------
Line no: 3 unary_expression : factor

------------------
0

 

------------------
Line no: 3 term : unary_expression

------------------
0

 

------------------
Line no: 3 simple_expression : term

------------------
0

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
0

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
0

 

------------------
Line no: 3 expression : logic_expression

------------------
0

 

------------------
Line no: 3 variable : ID LTHIRD expression RTHIRD

------------------
c[0]

 
 
MOV BX, 0
SHL BX, 1

------------------
Line no: 3 factor : CONST_INT

------------------
0

 

------------------
Line no: 3 unary_expression : factor

------------------
0

 

------------------
Line no: 3 term : unary_expression

------------------
0

 

------------------
Line no: 3 simple_expression : term

------------------
0

 

------------------
Line no: 3 rel_expression : simple_expression

------------------
0

 

------------------
Line no: 3 logic_expression : rel_expression

------------------
0

 

------------------
Line no: 3 expression : variable ASSIGNOP logic_expression

------------------
c[0]=0

 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 


------------------
Line no: 3 expression_statement : expression SEMICOLON

------------------
c[0]=0;

 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 


------------------
Line no: 3 statement : expression_statement

------------------
c[0]=0;

 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 


------------------
Line no: 3 statements : statements statement

------------------
int c[21], i, b;
c[0]=0;

 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 


------------------
Line no: 4 factor : CONST_INT

------------------
1

 

------------------
Line no: 4 unary_expression : factor

------------------
1

 

------------------
Line no: 4 term : unary_expression

------------------
1

 

------------------
Line no: 4 simple_expression : term

------------------
1

 

------------------
Line no: 4 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 4 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 4 expression : logic_expression

------------------
1

 

------------------
Line no: 4 variable : ID LTHIRD expression RTHIRD

------------------
c[1]

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX

------------------
Line no: 4 factor : CONST_INT

------------------
1

 

------------------
Line no: 4 unary_expression : factor

------------------
1

 

------------------
Line no: 4 term : unary_expression

------------------
1

 

------------------
Line no: 4 simple_expression : term

------------------
1

 

------------------
Line no: 4 rel_expression : simple_expression

------------------
1

 

------------------
Line no: 4 logic_expression : rel_expression

------------------
1

 

------------------
Line no: 4 expression : variable ASSIGNOP logic_expression

------------------
c[1]=1

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 


------------------
Line no: 4 expression_statement : expression SEMICOLON

------------------
c[1]=1;

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 


------------------
Line no: 4 statement : expression_statement

------------------
c[1]=1;

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 


------------------
Line no: 4 statements : statements statement

------------------
int c[21], i, b;
c[0]=0;
c[1]=1;

 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 


------------------
Line no: 6 variable : ID

------------------
i

 

------------------
Line no: 6 factor : CONST_INT

------------------
2

 

------------------
Line no: 6 unary_expression : factor

------------------
2

 

------------------
Line no: 6 term : unary_expression

------------------
2

 

------------------
Line no: 6 simple_expression : term

------------------
2

 

------------------
Line no: 6 rel_expression : simple_expression

------------------
2

 

------------------
Line no: 6 logic_expression : rel_expression

------------------
2

 

------------------
Line no: 6 expression : variable ASSIGNOP logic_expression

------------------
i=2

 
 
MOV AX, 2
MOV i1_1, AX 


------------------
Line no: 6 expression_statement : expression SEMICOLON

------------------
i=2;

 
 
MOV AX, 2
MOV i1_1, AX 


------------------
Line no: 6 variable : ID

------------------
i

 

------------------
Line no: 6 factor : variable

------------------
i

 

------------------
Line no: 6 unary_expression : factor

------------------
i

 

------------------
Line no: 6 term : unary_expression

------------------
i

 

------------------
Line no: 6 simple_expression : term

------------------
i

 

------------------
Line no: 6 factor : CONST_INT

------------------
21

 

------------------
Line no: 6 unary_expression : factor

------------------
21

 

------------------
Line no: 6 term : unary_expression

------------------
21

 

------------------
Line no: 6 simple_expression : term

------------------
21

 

------------------
Line no: 6 rel_expression : simple_expression RELOP simple_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 


------------------
Line no: 6 logic_expression : rel_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 


------------------
Line no: 6 expression : logic_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 


------------------
Line no: 6 expression_statement : expression SEMICOLON

------------------
i<21;

 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 


------------------
Line no: 6 variable : ID

------------------
i

 

------------------
Line no: 6 factor : variable INCOP

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 unary_expression : factor

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 term : unary_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 simple_expression : term

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 rel_expression : simple_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 logic_expression : rel_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------
Line no: 6 expression : logic_expression

------------------
i++

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX


------------------

New ScopeTable #1_1_1 created
Line no: 7 variable : ID

------------------
i

 

------------------
Line no: 7 factor : variable

------------------
i

 

------------------
Line no: 7 unary_expression : factor

------------------
i

 

------------------
Line no: 7 term : unary_expression

------------------
i

 

------------------
Line no: 7 simple_expression : term

------------------
i

 

------------------
Line no: 7 rel_expression : simple_expression

------------------
i

 

------------------
Line no: 7 logic_expression : rel_expression

------------------
i

 

------------------
Line no: 7 expression : logic_expression

------------------
i

 

------------------
Line no: 7 variable : ID LTHIRD expression RTHIRD

------------------
c[3]

 
 
MOV BX, i1_1
SHL BX, 1

------------------
Line no: 7 variable : ID

------------------
i

 

------------------
Line no: 7 factor : variable

------------------
i

 

------------------
Line no: 7 unary_expression : factor

------------------
i

 

------------------
Line no: 7 term : unary_expression

------------------
i

 

------------------
Line no: 7 simple_expression : term

------------------
i

 

------------------
Line no: 7 factor : CONST_INT

------------------
1

 

------------------
Line no: 7 unary_expression : factor

------------------
1

 

------------------
Line no: 7 term : unary_expression

------------------
1

 

------------------
Line no: 7 simple expression : simple_expression ADDOP term

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 7 rel_expression : simple_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 7 logic_expression : rel_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 7 expression : logic_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 7 variable : ID LTHIRD expression RTHIRD

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 7 factor : variable

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 7 unary_expression : factor

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 7 term : unary_expression

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 7 simple_expression : term

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 7 variable : ID

------------------
i

 

------------------
Line no: 7 factor : variable

------------------
i

 

------------------
Line no: 7 unary_expression : factor

------------------
i

 

------------------
Line no: 7 term : unary_expression

------------------
i

 

------------------
Line no: 7 simple_expression : term

------------------
i

 

------------------
Line no: 7 factor : CONST_INT

------------------
2

 

------------------
Line no: 7 unary_expression : factor

------------------
2

 

------------------
Line no: 7 term : unary_expression

------------------
2

 

------------------
Line no: 7 simple expression : simple_expression ADDOP term

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 7 rel_expression : simple_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 7 logic_expression : rel_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 7 expression : logic_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 7 variable : ID LTHIRD expression RTHIRD

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 7 factor : variable

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 7 unary_expression : factor

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 7 term : unary_expression

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 7 simple expression : simple_expression ADDOP term

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 7 rel_expression : simple_expression

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 7 logic_expression : rel_expression

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 7 expression : variable ASSIGNOP logic_expression

------------------
c[3]=c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX

------------------
Line no: 7 expression_statement : expression SEMICOLON

------------------
c[3]=c[2]+c[1];

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX

------------------
Line no: 7 statement : expression_statement

------------------
c[3]=c[2]+c[1];

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX

------------------
Line no: 7 statements : statement

------------------
c[3]=c[2]+c[1];

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX

------------------
Line no: 8 variable : ID

------------------
b

 

------------------
Line no: 8 variable : ID

------------------
i

 

------------------
Line no: 8 factor : variable

------------------
i

 

------------------
Line no: 8 unary_expression : factor

------------------
i

 

------------------
Line no: 8 term : unary_expression

------------------
i

 

------------------
Line no: 8 simple_expression : term

------------------
i

 

------------------
Line no: 8 factor : CONST_INT

------------------
1

 

------------------
Line no: 8 unary_expression : factor

------------------
1

 

------------------
Line no: 8 term : unary_expression

------------------
1

 

------------------
Line no: 8 simple expression : simple_expression ADDOP term

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 8 rel_expression : simple_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 8 logic_expression : rel_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 8 expression : logic_expression

------------------
i-1

 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 8 variable : ID LTHIRD expression RTHIRD

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 8 factor : variable

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 8 unary_expression : factor

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 8 term : unary_expression

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 8 simple_expression : term

------------------
c[2]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX

------------------
Line no: 8 variable : ID

------------------
i

 

------------------
Line no: 8 factor : variable

------------------
i

 

------------------
Line no: 8 unary_expression : factor

------------------
i

 

------------------
Line no: 8 term : unary_expression

------------------
i

 

------------------
Line no: 8 simple_expression : term

------------------
i

 

------------------
Line no: 8 factor : CONST_INT

------------------
2

 

------------------
Line no: 8 unary_expression : factor

------------------
2

 

------------------
Line no: 8 term : unary_expression

------------------
2

 

------------------
Line no: 8 simple expression : simple_expression ADDOP term

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 8 rel_expression : simple_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 8 logic_expression : rel_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 8 expression : logic_expression

------------------
i-2

 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX


------------------
Line no: 8 variable : ID LTHIRD expression RTHIRD

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 8 factor : variable

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 8 unary_expression : factor

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 8 term : unary_expression

------------------
c[1]

 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1

------------------
Line no: 8 simple expression : simple_expression ADDOP term

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 8 rel_expression : simple_expression

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 8 logic_expression : rel_expression

------------------
c[2]+c[1]

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX


------------------
Line no: 8 expression : variable ASSIGNOP logic_expression

------------------
b=c[2]+c[1]

 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


------------------
Line no: 8 expression_statement : expression SEMICOLON

------------------
b=c[2]+c[1];

 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


------------------
Line no: 8 statement : expression_statement

------------------
b=c[2]+c[1];

 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


------------------
Line no: 8 statements : statements statement

------------------
c[3]=c[2]+c[1];
b=c[2]+c[1];

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


------------------
Line no: 9 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(b);

 

------------------
4
Line no: 9 statements : statements statement

------------------
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);

 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------
Line no: 10 compound_statement : LCURL statements RCURL

------------------
{
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}


 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------

ScopeTable #1_1_1

ScopeTable #1_1
0 --> <i: ID>  <b: ID> 
1 --> <c: ID> 

ScopeTable #1
1 --> <main: ID> 
Line no: 10 statement : compound_statement

------------------
{
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}


 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------
Line no: 10 FOR LPAREN expression_statement expression_statement expression RPAREN statement

------------------
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}


 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end

------------------
Line no: 10 statements : statements statement

------------------
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}


 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end

------------------
Line no: 12 variable : ID

------------------
i

 

------------------
Line no: 12 factor : CONST_INT

------------------
0

 

------------------
Line no: 12 unary_expression : factor

------------------
0

 

------------------
Line no: 12 term : unary_expression

------------------
0

 

------------------
Line no: 12 simple_expression : term

------------------
0

 

------------------
Line no: 12 rel_expression : simple_expression

------------------
0

 

------------------
Line no: 12 logic_expression : rel_expression

------------------
0

 

------------------
Line no: 12 expression : variable ASSIGNOP logic_expression

------------------
i=0

 
 
MOV AX, 0
MOV i1_1, AX 


------------------
Line no: 12 expression_statement : expression SEMICOLON

------------------
i=0;

 
 
MOV AX, 0
MOV i1_1, AX 


------------------
Line no: 12 variable : ID

------------------
i

 

------------------
Line no: 12 factor : variable

------------------
i

 

------------------
Line no: 12 unary_expression : factor

------------------
i

 

------------------
Line no: 12 term : unary_expression

------------------
i

 

------------------
Line no: 12 simple_expression : term

------------------
i

 

------------------
Line no: 12 factor : CONST_INT

------------------
21

 

------------------
Line no: 12 unary_expression : factor

------------------
21

 

------------------
Line no: 12 term : unary_expression

------------------
21

 

------------------
Line no: 12 simple_expression : term

------------------
21

 

------------------
Line no: 12 rel_expression : simple_expression RELOP simple_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 


------------------
Line no: 12 logic_expression : rel_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 


------------------
Line no: 12 expression : logic_expression

------------------
i<21

 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 


------------------
Line no: 12 expression_statement : expression SEMICOLON

------------------
i<21;

 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 


------------------
Line no: 12 variable : ID

------------------
i

 

------------------
Line no: 12 factor : variable INCOP

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 unary_expression : factor

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 term : unary_expression

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 simple_expression : term

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 rel_expression : simple_expression

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 logic_expression : rel_expression

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------
Line no: 12 expression : logic_expression

------------------
i++

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX


------------------

New ScopeTable #1_1_2 created
Line no: 13 variable : ID

------------------
b

 

------------------
Line no: 13 variable : ID

------------------
i

 

------------------
Line no: 13 factor : variable

------------------
i

 

------------------
Line no: 13 unary_expression : factor

------------------
i

 

------------------
Line no: 13 term : unary_expression

------------------
i

 

------------------
Line no: 13 simple_expression : term

------------------
i

 

------------------
Line no: 13 rel_expression : simple_expression

------------------
i

 

------------------
Line no: 13 logic_expression : rel_expression

------------------
i

 

------------------
Line no: 13 expression : logic_expression

------------------
i

 

------------------
Line no: 13 variable : ID LTHIRD expression RTHIRD

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 factor : variable

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 unary_expression : factor

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 term : unary_expression

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 simple_expression : term

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 rel_expression : simple_expression

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 logic_expression : rel_expression

------------------
c[1]

 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX

------------------
Line no: 13 expression : variable ASSIGNOP logic_expression

------------------
b=c[1]

 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


------------------
Line no: 13 expression_statement : expression SEMICOLON

------------------
b=c[1];

 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


------------------
Line no: 13 statement : expression_statement

------------------
b=c[1];

 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


------------------
Line no: 13 statements : statement

------------------
b=c[1];

 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


------------------
Line no: 14 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(b);

 

------------------
2
Line no: 14 statements : statements statement

------------------
b=c[1];
printf(b);

 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------
Line no: 15 compound_statement : LCURL statements RCURL

------------------
{
b=c[1];
printf(b);
}


 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------

ScopeTable #1_1_2

ScopeTable #1_1
0 --> <i: ID>  <b: ID> 
1 --> <c: ID> 

ScopeTable #1
1 --> <main: ID> 
Line no: 15 statement : compound_statement

------------------
{
b=c[1];
printf(b);
}


 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC


------------------
Line no: 15 FOR LPAREN expression_statement expression_statement expression RPAREN statement

------------------
for(i=0;i<21;i++){
b=c[1];
printf(b);
}


 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end

------------------
Line no: 15 statements : statements statement

------------------
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}

for(i=0;i<21;i++){
b=c[1];
printf(b);
}


 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end
 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end

------------------
Line no: 16 compound_statement : LCURL statements RCURL

------------------
{
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}

for(i=0;i<21;i++){
b=c[1];
printf(b);
}

}


 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end
 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end

------------------

ScopeTable #1_1
0 --> <i: ID>  <b: ID> 
1 --> <c: ID> 

ScopeTable #1
1 --> <main: ID> 
Line no: 16 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}

for(i=0;i<21;i++){
b=c[1];
printf(b);
}

}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end
 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 16 unit : func_definition

------------------
int main ( ) {
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}

for(i=0;i<21;i++){
b=c[1];
printf(b);
}

}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end
 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 16 program : unit

------------------
int main ( ) {
int c[21], i, b;
c[0]=0;
c[1]=1;
for(i=2;i<21;i++){
c[3]=c[2]+c[1];
b=c[2]+c[1];
printf(b);
}

for(i=0;i<21;i++){
b=c[1];
printf(b);
}

}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
MOV BX, 0
SHL BX, 1
 
MOV AX, 0
MOV c1_1[BX], AX 

 
 
MOV BX, 1
SHL BX, 1
MOV SI, BX
 
MOV AX, 1
MOV c1_1[SI], AX 

 
;for loop start
 
 
MOV AX, 2
MOV i1_1, AX 

L2:
 
 
MOV AX, i1_1
CMP AX, 21
JL L0
MOV temp0, 0
JMP L1
L0: 
MOV temp0, 1
L1: 

MOV AX, temp0
CMP AX, 0
JE L3
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

 
 
MOV BX, i1_1
SHL BX, 1
MOV AX, temp1
MOV c1_1[BX], AX
 
 
 
 
MOV AX, i1_1
SUB AX, 1
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV SI, BX
 
 
 
MOV AX, i1_1
SUB AX, 2
MOV temp1, AX

MOV BX, temp1
SHL BX, 1
MOV AX, c1_1[SI]
ADD AX, c1_1[BX]
MOV temp1, AX

MOV AX, temp1
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp0, AX
INC AX
MOV i1_1, AX

JMP L2
L3:
;for loop end
 
;for loop start
 
 
MOV AX, 0
MOV i1_1, AX 

L6:
 
 
MOV AX, i1_1
CMP AX, 21
JL L4
MOV temp1, 0
JMP L5
L4: 
MOV temp1, 1
L5: 

MOV AX, temp1
CMP AX, 0
JE L7
 
 
 
MOV BX, i1_1
SHL BX, 1
MOV SI, BX
MOV AX, c1_1[SI]
MOV b1_1, AX 


MOV AX, b1_1
CALL OUTDEC

MOV AX, i1_1
MOV temp1, AX
INC AX
MOV i1_1, AX

JMP L6
L7:
;for loop end
MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

ScopeTable #1
1 --> <main: ID> 

Total lines: 16
Total errors: 0
-------------------------------------
Optimizer log: 
Removed blank line : 18
Removed blank line : 19
Removed blank line : 20
Removed blank line : 23
Removed blank line : 27
Removed blank line : 28
Removed blank line : 32
Removed blank line : 36
Removed blank line : 38
Removed blank line : 39
Removed blank line : 44
Removed blank line : 45
Removed blank line : 58
Removed blank line : 59
Removed blank line : 60
Removed blank line : 68
Removed blank line : 69
Removed blank line : 70
Removed blank line : 81
Removed blank line : 82
Removed blank line : 87
Removed blank line : 88
Removed blank line : 89
Removed blank line : 90
Removed blank line : 98
Removed blank line : 99
Removed blank line : 100
Optimized redundant MOV operation: 111
Optimized redundant MOV operation: 115
Removed blank line : 126
Removed blank line : 128
Removed blank line : 129
Removed blank line : 134
Removed blank line : 135
Removed blank line : 148
Removed blank line : 149
Removed blank line : 150
Optimized redundant MOV operation: 158
Line removed:38
-------------------------------------

ScopeTable #1
1 --> <main: ID> 
