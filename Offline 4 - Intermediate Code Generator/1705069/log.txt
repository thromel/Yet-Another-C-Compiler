Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : type_specifier ID

------------------
int a

 

------------------
Line no: 1 type_specifier	: INT

------------------
int

 

------------------
Line no: 1 parameter_list : parameter_list COMMA type_specifier ID

------------------
int a,int b

 

------------------

New ScopeTable #1_1 created
Line no: 2 type_specifier	: INT

------------------
int

 

------------------
Line no: 2 declaration_list : ID

------------------
t

 

------------------
Line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int t;

 

------------------
Line no: 2 statement : var_declaration

------------------
int t;

 

------------------
Line no: 2 statements : statement

------------------
int t;

 

------------------
Line no: 3 variable : ID

------------------
a

 

------------------
Line no: 3 factor : variable

------------------
a

 

------------------
Line no: 3 unary_expression : factor

------------------
a

 

------------------
Line no: 3 unary_expression : NOT unary_expression

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 3 term : unary_expression

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 3 simple_expression : term

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 3 rel_expression : simple_expression

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 3 logic_expression : rel_expression

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 3 expression : logic_expression

------------------
!a

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX

------------------
Line no: 4 factor : CONST_INT

------------------
0

 

------------------
Line no: 4 unary_expression : factor

------------------
0

 

------------------
Line no: 4 term : unary_expression

------------------
0

 

------------------
Line no: 4 simple_expression : term

------------------
0

 

------------------
Line no: 4 rel_expression : simple_expression

------------------
0

 

------------------
Line no: 4 logic_expression : rel_expression

------------------
0

 

------------------
Line no: 4 expression : logic_expression

------------------
0

 

------------------
Line no: 4 RETURN expression SEMICOLON

------------------
return 0;

 
MOV CX, 0

JMP L0

------------------
Line no: 5 IF LPAREN expression RPAREN statement

------------------
if(!a)return 0;

 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:


------------------
Line no: 5 statements : statements statement

------------------
int t;
if(!a)return 0;

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:


------------------
Line no: 5 variable : ID

------------------
a

 

------------------
Line no: 5 factor : variable

------------------
a

 

------------------
Line no: 5 unary_expression : factor

------------------
a

 

------------------
Line no: 5 term : unary_expression

------------------
a

 

------------------
Line no: 5 simple_expression : term

------------------
a

 

------------------
Line no: 5 variable : ID

------------------
b

 

------------------
Line no: 5 factor : variable

------------------
b

 

------------------
Line no: 5 unary_expression : factor

------------------
b

 

------------------
Line no: 5 term : unary_expression

------------------
b

 

------------------
Line no: 5 simple expression : simple_expression ADDOP term

------------------
a+b

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
a+b

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
a+b

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 expression : logic_expression

------------------
a+b

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 factor : LPAREN expression RPAREN

------------------
(a+b)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 unary_expression : factor

------------------
(a+b)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 term : unary_expression

------------------
(a+b)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 simple_expression : term

------------------
(a+b)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX


------------------
Line no: 5 variable : ID

------------------
a

 

------------------
Line no: 5 factor : variable

------------------
a

 

------------------
Line no: 5 unary_expression : factor

------------------
a

 

------------------
Line no: 5 term : unary_expression

------------------
a

 

------------------
Line no: 5 simple_expression : term

------------------
a

 

------------------
Line no: 5 factor : CONST_INT

------------------
1

 

------------------
Line no: 5 unary_expression : factor

------------------
1

 

------------------
Line no: 5 term : unary_expression

------------------
1

 

------------------
Line no: 5 simple expression : simple_expression ADDOP term

------------------
a-1

 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
a-1

 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
a-1

 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 5 arguments : logic_expression

------------------
a-1

 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX


------------------
Line no: 5 variable : ID

------------------
b

 

------------------
Line no: 5 factor : variable

------------------
b

 

------------------
Line no: 5 unary_expression : factor

------------------
b

 

------------------
Line no: 5 term : unary_expression

------------------
b

 

------------------
Line no: 5 simple_expression : term

------------------
b

 

------------------
Line no: 5 factor : CONST_INT

------------------
1

 

------------------
Line no: 5 unary_expression : factor

------------------
1

 

------------------
Line no: 5 term : unary_expression

------------------
1

 

------------------
Line no: 5 simple expression : simple_expression ADDOP term

------------------
b-1

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
b-1

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
b-1

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX


------------------
Line no: 5 arguments : arguments COMMA logic_expression

------------------
a-1, b-1

 

------------------
Line no: 5 argument_list : arguments

------------------
a-1, b-1

 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX


------------------
Line no: 5 factor : ID LPAREN argument_list RPAREN

------------------
sumf(a-1, b-1)

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 5 unary_expression : factor

------------------
sumf(a-1, b-1)

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 5 term : unary_expression

------------------
sumf(a-1, b-1)

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 5 simple expression : simple_expression ADDOP term

------------------
(a+b)+sumf(a-1, b-1)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX


------------------
Line no: 5 rel_expression : simple_expression

------------------
(a+b)+sumf(a-1, b-1)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX


------------------
Line no: 5 logic_expression : rel_expression

------------------
(a+b)+sumf(a-1, b-1)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX


------------------
Line no: 5 expression : logic_expression

------------------
(a+b)+sumf(a-1, b-1)

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX


------------------
Line no: 5 RETURN expression SEMICOLON

------------------
return (a+b)+sumf(a-1, b-1);

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0

------------------
Line no: 5 statements : statements statement

------------------
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0

------------------
Line no: 6 compound_statement : LCURL statements RCURL

------------------
{
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);
}


 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0

------------------

ScopeTable #1_1
0 --> <b: ID> 
4 --> <t: ID> 
6 --> <a: ID> 

ScopeTable #1
2 --> <sumf: ID> 
Line no: 6 func_definition : type_specifier ID LPAREN parameter_list RPAREN

------------------
int sumf ( int a,int b ) {
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);
}


sumf PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
sumf ENDP



------------------
Line no: 6 unit : func_definition

------------------
int sumf ( int a,int b ) {
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);
}


sumf PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
sumf ENDP



------------------
Line no: 6 program : unit

------------------
int sumf ( int a,int b ) {
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);
}


sumf PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
sumf ENDP



------------------

ScopeTable #1
2 --> <sumf: ID> 
Line no: 8 type_specifier	: INT

------------------
int

 

------------------

New ScopeTable #1_2 created
Line no: 9 type_specifier	: INT

------------------
int

 

------------------
Line no: 9 declaration_list : ID

------------------
x

 

------------------
Line no: 9 var_declaration : type_specifier declaration_list SEMICOLON

------------------
int x;

 

------------------
Line no: 9 statement : var_declaration

------------------
int x;

 

------------------
Line no: 9 statements : statement

------------------
int x;

 

------------------
Line no: 10 variable : ID

------------------
x

 

------------------
Line no: 10 factor : CONST_INT

------------------
10

 

------------------
Line no: 10 unary_expression : factor

------------------
10

 

------------------
Line no: 10 term : unary_expression

------------------
10

 

------------------
Line no: 10 simple_expression : term

------------------
10

 

------------------
Line no: 10 rel_expression : simple_expression

------------------
10

 

------------------
Line no: 10 logic_expression : rel_expression

------------------
10

 

------------------
Line no: 10 arguments : logic_expression

------------------
10

 

------------------
Line no: 10 factor : CONST_INT

------------------
11

 

------------------
Line no: 10 unary_expression : factor

------------------
11

 

------------------
Line no: 10 term : unary_expression

------------------
11

 

------------------
Line no: 10 simple_expression : term

------------------
11

 

------------------
Line no: 10 rel_expression : simple_expression

------------------
11

 

------------------
Line no: 10 logic_expression : rel_expression

------------------
11

 

------------------
Line no: 10 arguments : arguments COMMA logic_expression

------------------
10, 11

 

------------------
Line no: 10 argument_list : arguments

------------------
10, 11

 
 

------------------
Line no: 10 factor : ID LPAREN argument_list RPAREN

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 unary_expression : factor

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 term : unary_expression

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 simple_expression : term

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 rel_expression : simple_expression

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 logic_expression : rel_expression

------------------
sumf(10, 11)

 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1

------------------
Line no: 10 expression : variable ASSIGNOP logic_expression

------------------
x=sumf(10, 11)

 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 10 expression_statement : expression SEMICOLON

------------------
x=sumf(10, 11);

 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 10 statement : expression_statement

------------------
x=sumf(10, 11);

 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 10 statements : statements statement

------------------
int x;
x=sumf(10, 11);

 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


------------------
Line no: 11 PRINTLN LPAREN ID RPAREN SEMICOLON

------------------
printf(x);

 

------------------
-1
Line no: 11 statements : statements statement

------------------
int x;
x=sumf(10, 11);
printf(x);

 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC


------------------
Line no: 12 compound_statement : LCURL statements RCURL

------------------
{
int x;
x=sumf(10, 11);
printf(x);
}


 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC


------------------

ScopeTable #1_2
1 --> <x: ID> 

ScopeTable #1
1 --> <main: ID> 
2 --> <sumf: ID> 
Line no: 12 func_definition : type_specifier ID LPAREN RPAREN compound_statement

------------------
int main ( ) {
int x;
x=sumf(10, 11);
printf(x);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 12 unit : func_definition

------------------
int main ( ) {
int x;
x=sumf(10, 11);
printf(x);
}


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------
Line no: 12 program : program unit

------------------
int sumf ( int a,int b ) {
int t;
if(!a)return 0;
return (a+b)+sumf(a-1, b-1);
}

int main ( ) {
int x;
x=sumf(10, 11);
printf(x);
}


sumf PROC

POP return_loc
POP b1_1
POP a1_1
PUSH BX
PUSH DX

 
 
MOV AX, a1_1
CMP AX, 0
JE L1
MOV AX, 0
JMP L2
L1:
MOV AX, 1
L2:
MOV temp0, AX
MOV AX, temp0
CMP AX, 1
JNE L3
 
MOV CX, 0

JMP L0
L3:

 
 
MOV AX, a1_1
ADD AX, b1_1
MOV temp0, AX

 
 
 
MOV AX, a1_1
SUB AX, 1
MOV temp1, AX

 
 
MOV AX, b1_1
SUB AX, 1
MOV temp2, AX

PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH temp1
PUSH temp2
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, temp0
ADD AX, CX
MOV temp2, AX

MOV CX, temp2

JMP L0
L0: 
POP DX
POP BX
PUSH return_loc
RET
sumf ENDP


MAIN PROC 

MOV AX,@DATA
MOV DS,AX

 
 
 
 
 
PUSH a1_1
PUSH b1_1
PUSH t1_1
PUSH temp0
PUSH temp1
PUSH temp2
PUSH return_loc
PUSH 10
PUSH 11
CALL sumf
POP return_loc
POP temp2
POP temp1
POP temp0
POP t1_1
POP b1_1
POP a1_1
MOV AX, CX
MOV x1_2, AX 


MOV AX, x1_2
CALL OUTDEC

MOV AH, 4CH
INT 21H
MAIN ENDP



------------------

Total lines: 12
Total errors: 0
-------------------------------------
Optimizer log: 
Removed blank line : 23
Removed blank line : 24
Optimized redundant MOV operation: 34
Removed blank line : 37
Removed blank line : 43
Removed blank line : 44
Removed blank line : 49
Removed blank line : 50
Removed blank line : 51
Removed blank line : 56
Removed blank line : 57
Removed blank line : 99
Removed blank line : 100
Removed blank line : 101
Removed blank line : 102
Removed blank line : 103
Optimized redundant MOV operation: 125
Line removed:17
-------------------------------------

ScopeTable #1
1 --> <main: ID> 
2 --> <sumf: ID> 
